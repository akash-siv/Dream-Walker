/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 01.04.2025 18:04:37

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1968;
#else
constexpr int kTensorArenaSize = 944;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,444 } };
const TfArray<1, float> quant0_scale = { 1, { 1.5465768575668335, } };
const TfArray<1, int> quant0_zero = { 1, { -115 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data1[2] = { -101, 101, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00052671827143058181, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int8_t tensor_data2[2*5] = { 
  32, -117, 126, -65, 70, 
  -127, 26, -23, -37, -71, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 2,5 } };
const TfArray<1, float> quant2_scale = { 1, { 0.010688507929444313, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[5] = { 802, 667, 1324, -150, 468, };
const TfArray<1, int> tensor_dimension3 = { 1, { 5 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00018855022790376097, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[5*10] = { 
  -34, -61, 75, -26, 88, -58, -54, 25, 107, 6, 
  -44, -63, 32, 127, -30, 22, 49, 79, -4, 124, 
  -36, -28, 69, -29, 47, 32, -25, 14, 55, 8, 
  -82, -75, -27, -82, 14, 53, 10, -50, -17, -46, 
  -53, -30, -62, -60, 82, -50, -18, 61, 91, 18, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 5,10 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0076410672627389431, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[10] = { -173, -1159, -817, 603, 753, -85, -147, 1075, 640, 1835, };
const TfArray<1, int> tensor_dimension5 = { 1, { 10 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00016483296349179, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[10*20] = { 
  26, -34, -41, 26, 16, 5, -48, -20, 15, 20, 20, 2, -30, -28, -18, -41, 5, 9, -5, 5, 
  1, -2, -61, -14, 37, -50, 15, -42, -72, 26, -1, -51, 11, 1, -57, -25, -41, -49, 18, -4, 
  -63, -22, -44, 45, 18, 12, 37, -45, -2, -13, -47, -55, 2, -10, -9, -3, 2, -5, -1, 11, 
  7, -44, -14, -18, 72, -13, 61, 23, 32, -41, -24, 46, -35, -37, -38, -43, -14, 62, 27, 40, 
  40, -36, -39, 32, 2, 29, -15, -50, -39, -28, 40, -54, -13, 45, 22, 6, -39, 33, 37, 34, 
  -11, 21, 5, -41, 10, -28, 28, -41, -8, 12, -21, -34, -44, -22, 5, -4, 12, -40, -49, 15, 
  35, 2, 46, 20, 22, -6, 46, -4, 7, 6, -40, 32, 20, -42, -9, -6, -7, 35, -12, 27, 
  -10, -30, 34, 8, 74, -23, 9, 49, -83, 46, 32, 45, -39, 8, -2, 8, 12, -48, -16, 38, 
  61, 40, -8, -24, -26, 41, 21, 28, -36, -35, 22, 1, 4, 55, 14, 30, 4, -23, -39, -15, 
  -31, 21, 16, -47, 127, 33, 48, 73, 9, 13, 45, 95, 15, -28, -58, -34, -10, 71, 2, 42, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 10,20 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0089292954653501511, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[20] = { 34, -75, -85, -85, 197, 80, 34, 66, -203, -139, -28, 35, -85, 29, 8, -8, -38, 43, -53, 44, };
const TfArray<1, int> tensor_dimension7 = { 1, { 20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0013461173512041569, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[20*30] = { 
  12, -14, 19, 25, 3, 5, 13, -1, -4, -15, 21, 13, -22, 13, -12, 11, -19, 25, -8, 14, 9, -6, 7, 8, -1, -41, -2, 7, -6, -22, 
  -12, 13, 7, -12, -20, -11, 12, 1, -17, -9, 0, -20, 22, -12, -15, 20, -14, 0, -11, 13, 7, -1, -21, 14, 21, -77, -7, 0, 7, 14, 
  -27, -4, -13, -18, -17, 7, -5, -17, 9, -23, -25, -1, 22, -12, -2, -6, -7, -7, -12, -22, 11, 21, 3, -23, 21, -12, 19, -4, -16, 9, 
  9, 17, -15, -14, -11, 20, -20, -1, -10, 19, -1, -14, 7, -1, -10, 8, 10, 6, -18, 8, -17, -1, -24, -11, -19, 0, -10, -23, -12, -11, 
  -11, -20, -18, -6, -19, 19, -4, 9, -15, 15, -21, 17, -5, -6, 13, 4, -19, 8, -8, 0, -19, 23, -12, -1, 21, -11, 16, -4, -3, 5, 
  -17, -14, -3, -17, -34, 16, -11, -2, -5, -14, -27, 13, -7, -1, 4, -30, -22, 12, -13, 8, 19, -16, -12, -17, -10, 12, -8, 18, 6, 7, 
  15, -12, 19, -1, -8, 13, -15, 7, 15, -5, -5, 0, 13, -14, -23, -17, -5, 8, 4, 20, -4, -4, -15, 3, -17, -11, 19, -9, -22, -6, 
  -3, 11, 7, 16, 23, -12, 13, -11, 23, 2, 0, -13, 13, -5, -18, -10, 19, -20, 10, 21, 22, 11, -15, -16, 14, -28, -5, -22, 19, -14, 
  7, 12, 3, -13, -5, 19, -4, -11, -22, -9, -5, 6, 22, 0, 12, 6, 17, -29, -3, -25, -30, -6, 1, 4, 15, 5, -2, -4, 1, 6, 
  1, -8, 10, -10, 9, -13, -18, -2, -14, -3, 3, -20, 8, -15, -1, 5, -9, -25, -7, -17, 16, 0, -30, -21, -6, -32, 20, -12, -23, -21, 
  -15, 3, 2, -21, -11, 4, 23, -17, -7, 5, -19, 5, 6, 18, 11, 15, -16, -20, -1, -14, 4, -5, -20, 9, 16, -16, 22, -20, -9, 14, 
  -26, 14, -4, -21, 1, -11, 5, 24, 11, -7, -14, 11, 8, -14, -9, -6, -19, -6, 13, 1, 19, 9, -5, -14, 9, 0, -3, 1, 2, -17, 
  -27, 21, -25, -2, -7, 10, -17, -15, -20, -16, -1, -24, -8, 6, 16, 11, 10, 7, 1, 4, -15, 17, -3, -30, 3, -14, 23, -14, -6, -1, 
  6, 1, 14, -7, 18, 10, -19, -11, -13, 17, 21, -7, -18, 5, 11, 20, 18, 2, 14, -3, 0, -7, 18, 22, 3, -23, 6, 25, -26, 9, 
  14, -8, 15, 5, 14, 12, 10, -22, 19, 12, -1, -16, -16, 11, -16, 10, 5, 20, -18, 3, -11, 1, -19, 10, 4, -127, -4, 16, 2, -3, 
  17, 9, -25, 16, -9, 12, 13, -20, 9, 1, 18, -1, 8, 1, -15, 13, -24, 14, 4, 23, -11, -2, 19, -14, -4, -97, 14, -19, -7, 9, 
  3, -18, 12, -9, -3, 8, -9, -10, -7, -8, -12, -20, 7, 13, 14, 4, -11, -9, -6, -22, 19, 7, -8, 7, -23, -14, 14, -14, -20, 24, 
  17, 13, 20, -24, -6, 23, -5, 14, 4, 16, 8, -12, 19, 23, -9, -3, -16, -16, 23, -4, 16, -5, -19, -17, -10, -40, -16, -25, -6, 13, 
  1, 6, 4, -9, -2, 4, -22, 0, 9, -9, -24, 13, -18, -24, -10, 16, 0, -22, 19, 19, -12, -9, -3, 15, 16, -3, -21, 0, 9, 16, 
  -21, -1, 25, -3, -22, 10, -12, -1, 21, 11, -30, 2, -16, -2, -19, -20, -7, 16, -4, 11, 13, -23, 5, 17, -4, -50, 3, 3, -24, 20, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 20,30 } };
const TfArray<1, float> quant8_scale = { 1, { 0.014563494361937046, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data9[30] = { 1, -2, 0, 0, -1, -1, -3, 0, -1, -3, 2, -1, -1, -2, -2, -3, -2, -2, -2, -3, -1, -4, 1, 2, -2, -10, 0, 1, -6, -3, };
const TfArray<1, int> tensor_dimension9 = { 1, { 30 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0032774470746517181, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data10[30*444] = { 
  -43, -12, 51, -28, 39, 14, -36, -36, -44, -39, 47, -1, -26, 8, -20, -51, -50, -13, -28, 36, 11, -43, -46, 49, -36, -42, -34, 19, -39, -19, 40, 2, -34, 24, -46, -7, -40, 0, 60, 21, 30, 35, -27, 25, 13, 36, 6, 50, -22, -12, -21, 21, -5, 55, 0, 19, -9, 39, -2, -18, 17, 49, 44, -8, 49, 21, -17, 45, 10, 22, -21, -2, -29, 4, -15, 3, -6, 11, 26, -13, 30, -40, 50, 40, 30, 10, -10, 32, 49, -50, -30, -13, -18, 29, -3, -26, -23, -51, 25, 17, -26, 28, 32, -31, 35, 4, -3, 41, -33, 17, -21, -15, 38, 28, -7, -21, -7, 45, 27, 18, 8, -37, -25, -6, -20, 46, 18, -35, -4, -36, 37, -11, -63, 2, 50, 23, 14, 46, -4, 32, 59, -6, -11, 3, -6, 73, -15, -6, -3, -59, -31, 53, -32, 46, -42, 1, -45, 23, 11, 9, -20, 33, -29, 37, -26, 29, 45, 10, -16, 44, -30, -5, -9, -5, 53, -3, -11, 5, 35, -47, 23, 32, 1, 35, -46, -11, -40, 7, 11, 19, 5, 4, -15, 35, 62, -13, 58, 47, -10, 29, 12, 56, -45, -5, 50, -16, 22, 52, 5, 20, 12, -13, 15, 1, -7, -1, 20, 25, 19, -23, -1, 22, -42, -18, 5, -16, -32, -16, 18, -50, 20, 38, 13, 44, 46, -10, 16, 9, -29, -1, -12, -28, 50, -34, -37, -49, 43, -4, 25, 6, 13, 8, 14, 25, 38, 32, 40, -19, -30, -33, 31, 18, 3, -16, -5, 26, 31, 1, 13, -32, -45, 4, 1, -38, 45, -39, -17, -25, -31, 41, 29, 33, 38, -11, 43, 11, 29, 25, 46, -17, 9, -10, -25, 13, -11, -48, -53, 58, 2, 52, 69, 59, -43, -29, -33, -47, -4, 8, -6, 32, -43, 25, -47, -52, -23, 46, -41, 16, -15, 31, 48, 28, -12, -24, -53, 22, -10, 41, 44, 34, -26, 31, -34, -45, -25, -44, 46, -19, 27, 13, 51, -34, 1, 47, 28, 30, -7, -39, -40, 20, 35, 4, 7, 43, -11, 42, 5, 4, -27, 39, 16, 16, -6, 2, -27, -22, -13, -10, -35, 20, -33, 1, 45, -42, 10, -5, -9, -25, 20, 40, -27, -8, -14, 22, 41, 5, 27, 44, -58, -5, -31, 56, 10, -68, 8, -41, -17, 15, -30, -67, 6, -9, 2, 18, -54, -39, 11, -17, -34, 26, 10, 1, -5, 22, -52, -6, 16, 11, -39, -28, 34, -38, 34, -61, 42, 46, -8, -19, 5, 18, -49, 37, 12, -43, 48, 48, -6, 29, -27, 36, -25, -15, 3, -17, 
  -72, 32, -5, -47, 3, -18, 51, 48, 10, 51, -25, -19, 56, 6, 0, 54, 30, 25, 42, 57, -5, -8, 54, 17, -38, 16, -22, 26, 53, -5, -10, 15, 7, -2, -5, 18, -5, 2, 46, -2, -18, 11, -8, 38, 40, -12, -12, -39, 32, -30, 45, 24, -2, 12, -49, -41, 27, -45, -36, -4, 19, -39, 15, 13, -22, 37, -44, -4, 2, 40, 28, 8, -7, -41, -60, 35, -29, -36, 8, 35, 16, 50, -24, 1, 3, -36, 53, -27, 37, -7, 36, -34, -3, 34, 11, -5, 6, -44, 28, -32, -20, -27, -18, -4, 36, 56, -22, 51, 32, 30, -15, -32, -47, -2, -36, 40, -7, 0, -18, -12, -40, 44, 13, -38, -4, 16, 46, -45, 44, -53, 9, 32, -38, -23, -19, 48, -27, 24, 44, -2, -30, -8, -7, -8, 15, -20, -38, 8, 17, -7, 29, 14, -24, -52, 37, 17, -33, 0, -4, -6, -52, -43, 48, -9, -7, 21, 43, 31, 5, -11, 17, 27, -43, -6, -22, 8, 33, -22, -12, -15, -26, -7, 23, -27, 33, -48, -1, 21, 3, -17, -26, -49, 42, -13, -27, -48, -22, -14, 3, 7, 39, -22, -6, 40, -33, -23, 14, 16, 40, -9, -21, -2, 3, 43, 41, 23, 38, 41, -23, -55, -31, 3, 23, 2, -29, 19, -46, -13, -4, -3, 20, -24, -38, 19, 27, -8, 43, 4, -48, 9, -44, -37, 29, 10, 18, 20, -18, 19, 30, 29, 34, -7, 35, -23, 39, -11, 32, -12, -18, -99, -8, -44, -45, 23, 50, -50, -45, 48, -32, 8, 35, 5, -20, 26, -28, 50, -51, -24, -30, 51, -10, 40, -44, 11, -20, 46, -25, 50, -28, -13, -48, 36, 35, 8, -14, -30, 2, -39, 33, -4, -1, 5, -45, 28, -12, 45, 37, -16, 8, -35, -41, 18, 23, -36, 46, -44, -20, -50, -30, -42, 23, 7, -46, 53, -38, 43, 54, 24, 26, -13, 5, -29, -40, 9, 7, -29, -3, -46, 47, -42, -46, 38, 41, -1, -12, 16, 47, -56, -3, -29, -48, 3, -47, -8, -35, 1, -45, 14, -42, -45, 20, 23, 41, 39, -13, -35, 1, 0, -49, -51, 5, 41, -15, -52, 12, -10, -10, -27, 6, -20, 32, -28, 14, 27, -21, 6, 44, -5, -18, -57, 28, -55, -26, -49, -40, 11, 26, 39, -45, -15, 9, 4, 37, -9, 39, 18, -6, 13, 38, 21, -7, 44, 35, -1, -12, -41, -19, -1, 24, -53, -28, -9, -60, 42, 4, -55, 12, 10, 41, 12, -10, -51, 35, 35, -24, -56, -13, 23, -57, -55, -20, -34, -15, -15, 
  -28, -46, -31, 31, 29, -45, 3, -4, -30, 35, 42, 11, 4, -10, -43, -29, 11, -12, 30, 48, -22, 17, -34, 36, -41, -31, -37, -2, -45, -21, -7, 49, 19, 53, -10, -51, 27, -127, 33, 2, 51, -35, 10, 10, 14, 24, -13, 5, 5, 35, -40, -17, -23, -42, -24, 46, 6, 42, 3, 5, -35, 50, -15, -35, 17, 6, 17, -34, -26, 20, -18, -2, 6, 10, -20, 11, -29, 11, 55, 49, -23, -1, -45, 24, 19, 32, -1, 0, 13, -1, 28, 32, 33, 54, 47, 44, -39, -13, 5, -15, 24, -38, 5, -3, 30, 30, -38, 39, 13, -19, -28, -22, -22, -39, -10, -40, 5, 48, -8, -8, 51, 13, 60, 58, 44, -27, -11, 19, -12, 38, -28, 2, -37, -17, 4, -30, -43, -39, 13, 10, 41, -45, -11, 52, -40, -22, -39, 20, -12, -16, -14, 43, -22, 46, 34, 26, 66, -20, 22, -29, -21, 47, 3, -33, 19, -25, -2, -36, 51, 45, -19, -19, -59, 34, -35, 51, -18, -29, -18, 4, 17, 37, 0, -11, -7, -32, -28, -25, -18, -24, 20, -1, 46, -37, -27, 22, 64, -23, -5, 58, 59, 61, -34, 20, 29, 2, 14, 19, -12, 37, 0, 10, 10, 59, -25, 15, 58, 51, 20, -20, 30, 29, -41, 15, -26, 48, -32, -1, -9, -45, 45, 52, 32, 27, 9, 17, -29, 14, 25, 54, -35, -51, 52, 11, -12, 45, -29, -31, -46, 17, -10, -27, -46, -14, -21, 40, -23, -6, -24, -57, -22, 17, 10, -31, 41, -5, -39, 10, 34, -35, -10, 21, -14, 29, 29, -12, 27, -42, 4, 4, 44, -23, -38, 46, 6, -5, 35, 16, -4, 48, -9, -37, -13, 47, -2, -12, -38, 34, -6, 38, -2, -36, 45, 6, 3, -43, 31, -16, 12, 33, 29, 51, 46, 19, 1, 31, -25, 7, 30, -5, -26, -29, 29, -48, -10, 7, -50, 42, 33, 16, 37, 43, 48, -74, -43, 30, 25, -12, 34, 5, 16, 25, 31, 23, -1, 47, -17, 39, -42, -37, -49, 45, 26, 44, -3, 8, 40, 3, -54, 41, -22, -48, 40, -3, -42, -32, -30, 32, -44, -50, -25, 6, -17, -6, -37, 61, 5, 64, 55, 33, 24, 2, 33, 46, -35, 58, 57, 0, 11, 9, 60, -6, -29, -10, -24, -11, -24, 55, 6, 18, -18, 60, -5, -33, 62, -3, -39, -5, 17, 3, 1, 22, 45, -45, 5, 42, -4, -36, -31, 9, -53, 45, 1, -43, 15, -13, -29, -35, -41, 7, -55, 10, 35, 9, 17, -42, 4, -42, -16, -55, -24, 14, 8, 29, 
  -74, -69, 26, 59, 17, 54, -38, 16, 31, 19, -9, -54, 18, -20, 20, -2, 31, -54, 30, -9, -23, -52, -25, -9, 49, -4, 37, 50, 1, -39, -41, -2, 33, 36, 2, -35, 16, -50, -28, 41, 50, -8, 43, 41, 38, 50, -39, -37, -21, -2, 25, -22, 23, -27, 38, -11, -5, 12, -17, 1, 26, 17, 13, -47, -27, 54, -9, 12, 46, -34, 1, 1, 11, 24, -20, -40, 16, 27, 3, 34, -45, -18, 18, 46, 0, 43, 19, -42, -11, 1, -24, 23, 3, 43, 35, 30, 9, 36, -33, 28, -14, -38, 50, -6, 19, -6, -43, -10, 45, 14, 16, 27, 23, -7, -18, 28, 43, -32, 33, 2, -6, -25, 54, 28, 4, 16, -9, 1, -13, 50, 69, -37, -38, -43, 8, 6, 14, 45, 61, -13, 1, 83, 9, -44, -28, 15, -7, -41, 21, 14, -58, -43, -12, 64, 59, 42, -28, -48, -2, -1, 2, -20, -41, -32, 12, -2, -21, 34, -19, 29, -18, 16, 55, -12, -29, -23, -42, -6, -25, 48, 12, 6, -25, 48, 27, -47, -1, 7, 29, -18, -29, 18, -26, -3, -22, -4, -13, 37, -21, 31, -20, 43, -51, -45, -4, 24, -16, -48, 9, 44, 27, 26, -43, 8, -29, -55, -8, -2, -36, -1, 57, -14, -34, -40, 19, 8, -12, 34, -27, 45, 3, 41, -38, -29, -49, -35, 8, -24, -13, -19, 21, -47, 5, -33, 37, -5, 42, 49, 1, -35, 17, 38, 21, 33, -17, 46, 14, -2, 5, 16, 39, -3, 54, 11, 35, -38, -21, -42, 39, 32, -47, -9, 54, 36, -23, 27, 8, 38, -6, 43, -6, -51, 26, -32, -10, 27, -6, -3, 3, -39, 44, 18, -29, 21, -3, -47, 23, -23, -17, 34, 54, 40, 20, 2, -49, -48, 1, 17, -44, -5, -41, -25, 15, -27, 41, -19, 45, -1, 6, -44, -22, -22, -12, 13, -40, -49, -24, -32, 45, 24, -3, 25, 48, 30, 47, 2, -43, 29, 12, 24, 47, 55, -21, -42, -17, -37, -12, 37, 13, 28, 24, -12, -40, -36, -57, -55, -19, -42, -44, 16, -47, -30, 33, 31, 1, 7, 11, 56, -18, 17, 29, 25, -39, 20, 3, 49, -23, 4, -9, 60, -35, -22, -20, -15, 0, 30, -27, -10, 27, -33, 19, 11, 21, -13, 15, 28, -18, -38, 31, -19, 14, -13, -25, -10, -20, 6, -51, -72, -5, -11, -13, -39, 35, 21, 40, -17, 2, -18, 35, 9, -21, -24, -48, -52, -9, 13, -31, 22, 9, -22, 0, -45, -16, 50, -49, -11, 54, 22, 15, 14, 9, -43, -28, 33, 
  25, -62, -34, 18, 72, 26, 39, 59, -26, 56, 31, -48, -5, -43, 45, -27, -18, -33, 35, 42, 26, -27, -38, -9, -17, 15, 33, -52, -43, 34, -32, -18, -7, -16, 44, 23, -9, -46, 44, 60, -36, 45, 59, 19, -11, 45, 0, 17, 48, -11, 33, -14, -20, 9, -46, -30, 23, -36, -31, -38, -16, 20, 37, -43, 14, 47, -34, -44, 17, 43, -23, 33, -32, -27, -11, 26, 17, 35, -24, 49, 57, 1, -1, -37, 51, 52, 24, -16, 25, 2, -9, 47, -48, 44, 11, -14, 37, 38, 13, 30, -7, -34, -29, 31, 42, 33, -36, 23, -45, -2, -30, 12, 34, -6, -49, -21, 27, 26, 27, 17, -25, -31, 21, 20, -24, 19, -25, -44, -5, 49, 39, -54, -28, 19, 47, 21, -46, 39, 0, 1, 36, 40, 15, -25, -8, -36, 30, -8, -4, 8, 43, -8, -18, -7, -14, -22, 45, -35, 52, -42, 54, 35, -40, -4, 31, 10, -56, -12, 4, -5, 41, 18, 36, 10, 45, 32, 23, -2, 36, -27, 6, -45, 26, 52, 10, -43, 22, -2, 12, 30, 0, -40, 35, -17, 23, 42, 45, 14, 16, -48, 16, 31, 22, 19, -55, 39, -16, 18, -18, 1, 50, -13, 49, 38, 25, -38, -22, 33, -6, -12, 3, -9, 31, -7, -14, 3, 61, 55, -9, 33, -5, -11, 43, -12, -50, -11, 58, 40, -43, -25, -44, 50, -19, -24, -49, 52, -38, -41, -34, -35, 6, -34, 16, 1, 26, 24, -42, -31, 6, -22, 2, -43, -20, 42, -9, 17, -3, 47, -1, -11, 5, -39, -42, -38, 5, -21, -44, -21, -26, -35, 1, -14, 43, 50, 46, 47, -32, -26, -22, 0, 29, 19, 7, 25, 27, 30, -52, 29, -45, -44, -15, -35, -8, 15, 12, -12, 6, 14, 30, -21, 11, 24, 30, 31, -33, -6, 36, -42, -44, 53, 20, 34, -23, 47, 13, 10, -47, -16, 53, 37, -11, 41, -19, 7, -4, 20, -12, -15, 31, -25, -45, 8, -6, 42, 2, 31, 15, -26, 38, 9, 48, -43, 41, 7, -21, 12, 5, -35, 26, 9, -29, -43, -24, -13, -17, 13, -38, -9, -18, -41, -32, -15, 41, 38, 14, 16, -27, 48, 46, -31, -18, 20, 20, -18, 36, -3, 17, 22, -43, 31, -40, -40, 20, -65, -5, 27, -63, -5, 42, 10, -48, -22, 4, -42, -50, -1, -32, -30, -25, 36, 33, 18, 46, 23, 17, 30, 23, 52, 27, 36, 38, 13, 41, -10, -47, 51, 36, -18, 0, -44, -16, 4, -49, -11, -12, -22, -10, -2, -40, 26, -48, 13, 12, 10, 
  -18, 45, -1, -51, 4, 11, 14, -1, -50, 27, 1, 11, -14, 33, -41, -41, 41, 3, -5, -8, -8, -16, -30, -2, 38, -47, 48, 32, -34, -35, -49, -45, 1, 38, -5, 39, 26, -33, -7, -38, 11, -34, -39, 11, -17, -29, 26, -43, 38, 48, -32, -20, 36, 22, 22, 9, -2, 42, -1, 32, 8, 54, 43, 52, -4, 28, 34, 42, 45, -14, 11, 10, 20, -28, -7, -50, 35, -35, -42, 0, -50, 13, 10, 22, -6, -22, -45, -7, -31, 47, 48, -27, 43, 10, 1, -20, 10, 11, 50, -2, 42, -16, -46, 34, -14, 38, -1, -27, 29, 32, -49, -49, 29, 6, 41, -31, -41, 53, -13, -43, 46, -20, -38, -12, 4, -18, -42, -43, 28, -42, -33, -42, 40, 23, 21, -6, -45, 0, -15, -30, 24, -27, -18, -12, -31, 29, -49, -25, -21, 30, 19, 23, -39, -1, 40, 50, -45, -32, -6, 26, 39, 41, 11, -42, 49, -24, 8, -7, 23, 34, -49, 51, 32, -43, 29, 25, -4, -45, 51, 1, 8, 9, -24, 3, -10, -30, -21, -28, -51, 38, 2, -32, -2, -26, 10, 14, -4, -30, 52, -16, -41, 1, 10, 42, -50, -12, -13, -36, 2, 17, 45, 45, -1, 55, -40, -25, 41, 25, -38, -47, 18, 10, 20, -26, -1, -37, -51, -11, 8, -28, -14, -26, 50, -24, 23, -9, 3, -20, -42, -2, -6, 23, -37, 51, 11, 27, 11, 49, -28, 17, -30, -33, -15, -32, -27, -34, -44, -24, 0, -13, 46, -7, -47, -39, 32, 43, 38, 48, 20, 11, -5, 39, 16, -43, -42, 8, 4, 16, 40, -2, 47, 30, -21, -31, 52, -26, -23, 30, 39, 16, -42, 27, 46, 30, 46, -10, -32, -38, 7, -35, -6, 43, 45, -10, -19, -17, 17, -49, -48, 2, 21, -42, -41, -38, 48, 54, -12, -31, -31, -39, -31, 43, 20, -26, 1, -49, -47, -8, 52, -47, -5, 54, -50, -45, -49, 11, 40, 50, 52, 40, -44, -47, 9, -32, -21, 50, -19, 27, 36, -46, -6, 4, 32, -16, 54, 7, 18, -37, -23, 12, -50, 28, 9, -49, -46, 0, 27, 52, -40, 10, 23, 5, -14, -20, -30, 12, -22, 24, 4, -6, 5, 10, 25, 2, 35, -25, 19, -35, -10, 46, 6, -14, 27, 21, -23, -23, 36, -2, 50, -13, 14, 11, 41, 17, 2, 0, -40, -39, 22, 40, -15, 45, 12, -15, 38, -47, -16, 48, -34, -43, 2, -33, -7, 16, 19, 1, 17, 14, 21, 7, -50, -7, -3, 54, -37, -15, -45, -19, -28, -7, -46, -31, -10, 3, 
  25, -45, -20, 39, -20, -34, 9, -42, 4, 30, -4, -37, 56, -14, 13, 25, -16, -13, -39, -33, 39, 5, -2, -12, -44, -41, 57, 4, 1, 42, -41, 45, -1, -16, 48, -5, 20, -52, 47, 36, -35, 49, -28, -33, -43, -16, -25, -40, -11, 50, 36, -20, 27, 14, 35, -50, -27, 39, 18, 53, -34, 54, 51, 11, -22, -13, -1, -5, 5, -5, -7, 27, -26, -30, 28, 28, 20, 13, -25, -26, -23, -3, 5, 54, -1, -42, -40, -6, -1, 15, 44, 38, 39, -45, 34, 33, -36, 20, -43, 1, -33, -6, 48, 0, 12, 48, -22, -44, -8, 42, -17, 44, 32, 7, 34, 19, 22, -17, -24, -55, 33, -24, 6, 49, 27, 29, -42, 53, 31, 48, -11, 14, -14, 13, -25, -35, -2, 27, 11, -28, -3, 59, -17, -21, 9, 6, 22, -47, -11, -57, -33, 26, 49, 3, -4, 34, -40, -1, -55, 46, -21, -47, -38, -30, 26, -21, -63, -19, -1, -31, -31, 19, 45, 48, 41, -7, 33, 31, -24, -46, -33, 22, -9, -44, -27, -51, 36, -45, 16, 40, 0, 5, -21, 42, -2, 6, -41, -9, -20, -36, -30, 8, -50, 10, -16, 12, -53, 34, -39, -35, 15, -12, -10, 51, -41, 37, -24, -25, -35, -22, 24, 38, -41, 33, 9, 17, -42, 37, 41, 10, -15, 57, 14, -19, 21, -19, -22, -1, -1, -40, -19, -22, 24, -13, -9, -32, 31, 34, 28, -20, -16, 53, 37, 15, -26, 14, 19, 17, 14, -29, -19, -40, 11, 9, 37, -20, 49, -4, -35, 53, 20, 21, 17, 56, 40, 37, 39, -44, 38, -36, 32, -29, -26, -44, -34, 14, 3, -7, -26, -43, -4, 37, 53, -44, 50, -13, 29, -11, 20, -32, -13, -41, 12, 5, 55, 18, -28, 1, 22, 23, 10, -45, -22, 54, 5, 36, 41, -34, 3, -22, -16, -42, 27, -26, 40, -42, 10, 53, 55, -38, 29, 5, 5, -9, -6, 59, 38, -7, 5, -5, -39, -6, -5, -46, 12, 27, 31, 13, -26, -22, 39, 37, -27, 26, 28, 9, -27, 3, -24, -43, 14, 46, 22, -7, 3, -43, 16, 52, -27, 27, -13, 50, 21, -27, -21, 51, 31, -27, 10, 20, 46, -43, -15, -41, 38, 5, 28, -30, -43, -19, -34, 14, 29, 25, -43, -11, 54, 23, 39, -43, 47, 6, -26, -48, -34, 35, -17, -2, 18, 34, -45, 32, 49, 38, 41, -48, 24, -24, 23, 17, -21, -12, 35, -21, -45, -43, -26, -36, 23, -15, -23, 6, 23, 30, 14, 19, -29, -6, 19, 6, -35, 6, -53, 41, 
  7, 48, 37, 29, -5, 42, 43, -18, -16, 40, -47, -31, -31, -24, -27, -35, -8, -37, 16, -3, 12, -39, -44, 8, -6, -27, -18, -48, 51, -15, -4, 5, -33, 22, -19, 43, -25, -99, 43, -16, -39, -55, -46, -20, 3, -8, 44, 35, -18, 40, 3, -48, -29, -41, -53, -49, 10, 43, 18, 9, -15, 47, -33, 36, -19, -24, 43, 43, -4, -34, -19, -40, 48, -52, -70, 53, 6, 21, -7, -29, -20, 46, -44, 6, -33, 45, -8, 29, -12, 42, 32, 52, 5, -12, 30, -48, 21, -2, -42, 46, 27, 41, 24, 13, -20, 19, -20, -43, 12, -4, -21, -64, -37, -14, -19, 34, -31, 53, -42, -9, 6, 51, -29, -40, 35, -13, -13, 35, 45, 35, 9, 25, -7, -26, -13, 13, -7, -37, -47, 15, -14, -19, -8, 3, 39, -67, 24, -5, 1, 8, -38, 0, -36, 16, -26, 39, 12, 8, 38, 28, 35, -43, -1, -26, -47, 30, 51, 31, -5, -5, -33, -34, -43, 53, 12, 4, -33, -11, 20, -9, 26, -11, -33, 52, -41, -15, -32, -9, 24, -8, 15, -34, 34, -9, 47, -51, -24, -38, 50, -35, -32, 15, -12, -13, 21, -9, -37, 5, 36, 19, -58, -49, -46, 3, 29, 15, -47, -4, -45, 32, 4, -23, 7, -22, -24, -12, 19, 37, 18, 18, -6, 5, -8, -20, -23, 50, -43, 44, -6, 38, 28, 18, -18, 36, -53, -29, 28, -9, 15, 18, -52, 3, -17, -23, -19, -29, 10, 32, -31, -90, 47, 3, -61, -11, 2, 33, -42, 14, -50, 20, -9, -23, -19, -18, 22, 14, -42, 21, 26, -51, -36, 48, -20, 19, -37, 32, -20, -34, -20, 27, -46, -51, -34, 5, 3, -7, -6, 42, -3, -16, -12, 38, -1, -54, 4, 2, -24, 21, 24, -26, 24, -1, 10, -7, -21, 28, 54, 14, 44, -25, -43, -34, -20, -15, -16, 36, -26, -31, 14, 48, 5, 39, -2, 19, 18, 12, -31, -21, -16, -25, -18, -28, -38, -14, 21, 18, -32, 18, -26, 30, 5, 7, -18, -48, 15, -9, 26, 25, -26, 33, -3, 24, 26, 23, -16, 17, 29, -36, -1, 35, -16, 5, -29, -26, 42, -25, 0, 5, 43, -26, -48, 39, -20, -27, 51, -13, 21, 48, 26, 22, 35, 10, 34, 54, 27, -22, 28, 4, 4, 43, 42, -6, -19, 51, -59, 4, -45, -61, -28, 28, 9, -12, 15, 32, -20, -1, 29, -14, -22, 33, 57, -25, 45, -13, 3, -38, -48, 15, -40, 22, 19, 14, -43, 2, 16, -50, 14, 30, -10, 7, -32, 35, 12, -15, 
  -6, 9, -20, 22, -14, -1, -4, -42, 38, -31, -16, 11, 58, 26, 44, -23, 38, -41, 0, -43, 32, -20, 2, 56, -41, -33, 8, -34, -48, 31, 20, 55, -26, -49, -54, 20, 18, -98, 37, -16, 32, -36, -27, 20, 40, -47, -31, 31, 3, -29, -50, 43, -29, 19, -28, 45, 43, 6, 14, -5, 0, 40, -13, -38, 46, 8, -32, -53, -25, 5, 38, -25, 14, 32, 8, -22, 9, -31, -24, -44, 39, -25, -11, 23, 16, -17, 44, -41, -49, 1, 2, 18, 16, 17, -3, -5, -38, 40, -37, -6, 49, 19, -38, -1, -48, -21, -10, 13, 9, -40, -49, -38, 23, 6, -8, 46, 59, 34, -8, 46, -32, -13, -14, 52, -19, -19, 27, 12, 28, -24, 25, 2, -14, -23, 21, -5, 19, -30, -52, -15, 49, -5, -20, -9, 42, 24, 22, -16, 1, 68, -64, -35, 35, -10, 1, 39, 26, -35, 8, 33, 2, -13, 4, -19, 4, -28, 29, 7, 63, -28, 36, 65, 33, 23, 36, 48, 41, 44, -35, -20, 51, -27, 7, -11, -22, -61, 1, 37, -19, 25, 43, -3, -38, 38, 6, -7, 6, 0, 3, -27, 21, 56, 5, 24, -22, 29, -34, -13, 31, 41, -6, -9, -17, -6, -19, 15, 7, -18, 12, 47, 3, 29, -15, -31, -15, 29, -32, -17, -34, 18, 13, 6, 0, 0, 50, -35, 37, 22, -32, 50, 40, 28, 17, -31, 50, -28, 41, 1, -1, -3, 48, -15, -44, 11, -43, -46, 36, -1, -11, -72, 44, 38, -42, 21, 23, -26, 44, -15, -10, 11, 7, 20, 43, -45, -22, -23, 2, 37, -47, -41, 25, -53, 53, -7, -39, 10, 21, 49, 25, -29, 17, -4, -44, -42, -46, -20, -37, -24, 34, -32, -48, 37, -3, 22, 42, 31, 16, -11, 4, -42, -45, -27, 22, -23, 21, -21, 43, 44, -31, -28, 21, -13, 24, -5, -2, 7, 22, 39, -48, -16, -31, -40, -4, -28, -38, -39, -5, 7, -47, 16, 48, 8, -22, -46, -18, -43, 61, 34, -1, 1, -52, 24, 19, 31, 17, 33, -19, 51, -58, -10, -53, 0, 9, 5, -57, -21, 43, 19, -5, -35, -44, -40, -39, 17, -42, 1, 34, -45, 39, -30, -27, 9, 44, -29, 4, -16, -16, 50, -36, 47, -44, 33, -36, 19, -19, 2, -28, -35, -40, 45, 63, -11, 35, 43, 1, -34, 44, 6, 26, 16, 43, -37, -5, -3, -25, 31, -32, -1, -18, 29, -13, 36, -5, 20, 6, -14, -21, 29, -25, 3, 30, 5, -30, -2, -18, 21, 21, 33, 36, 20, 18, 15, 40, 26, 
  -61, 30, -2, -12, -48, -3, -49, -39, -49, 4, 45, 2, 41, 17, 36, 45, 57, 5, 19, 22, -20, 12, 2, 8, 39, 15, 11, -31, -25, 33, -49, -45, 49, 6, 54, -41, -28, -52, 15, -39, -49, 37, 43, -36, -46, -32, 26, -47, 49, -4, -36, -40, -49, -20, 54, 2, -34, 22, -25, 18, 45, 11, -4, 19, 1, -34, -20, -13, -42, -37, 0, -47, 24, 34, -40, -46, 44, 3, 27, -20, 45, 11, 48, 18, 41, 4, 25, -34, -16, 33, 27, 28, 11, -18, -33, 22, 8, 44, -1, -8, -48, 30, -37, 6, -40, -7, -6, -38, 26, -14, -49, 22, -8, -38, 34, 17, -50, 27, -40, -36, -55, -38, 37, -23, 49, -15, -3, -19, -26, 24, -44, -40, -52, -42, 14, 8, 21, -8, -37, 15, 6, -4, 45, 15, 31, 32, 14, -25, -66, -15, -26, -54, 3, -48, -8, -28, -32, 36, -54, 4, -20, -43, -36, -42, -11, 48, 47, -54, -6, 36, -52, 49, 45, -28, 50, -51, 41, -38, 49, 34, -24, 53, 42, 13, 18, 10, 37, -33, -10, 7, -38, -14, -6, 46, -26, -14, -17, 32, -44, 31, 48, -33, -44, -48, -39, 53, 19, 32, 21, 25, -26, -7, -34, 27, -5, -52, 28, 21, 4, -35, -23, -15, -49, 5, -25, -25, 22, 4, -11, -40, 24, -15, -33, -34, -39, -15, 18, -18, 36, 44, 16, -25, -26, 45, 46, 51, -31, 51, -21, -38, 23, 33, 50, 48, -22, 35, 45, -44, 36, 10, 28, 23, 13, 30, -14, -25, 57, 18, 40, 39, 10, -29, 28, -26, -30, 24, 39, -27, -33, 20, -4, -20, -47, 29, -5, 53, -7, -10, -27, 34, -30, 2, 42, -5, -29, -36, -41, 31, 32, 8, -29, 7, 25, 1, 33, -14, 26, 55, 33, 21, 52, 46, -41, 17, -26, 35, 11, 47, -19, 44, -33, 52, -43, 11, -11, -48, 5, -17, -30, -6, 32, 56, 45, -70, -41, 41, -29, 11, 25, -10, -17, -23, 14, 11, 27, 26, 9, 44, 1, -27, 45, -43, -32, 47, 29, 6, -47, 12, 25, 10, -47, 11, -5, -12, 27, -31, 2, 53, 4, -2, 4, -23, 26, -37, -15, 23, 9, 35, -4, 1, -34, -18, -54, -1, -53, 3, 16, 28, -52, 13, -50, -34, -25, 19, 45, -26, -29, -22, -12, 23, -11, -34, 9, -28, -1, 27, -20, 21, 37, 36, -33, -3, -36, -31, -33, -10, -9, 5, -32, -32, -17, -49, -23, -53, 8, -35, 28, 5, 45, -42, -56, -56, -6, 50, 43, 17, -10, 9, -40, 7, -1, 47, -21, -2, 
  60, -18, -30, 26, 27, 19, 19, 19, 13, -10, -28, 40, 19, 43, 20, 10, 45, -24, -15, -46, -48, 35, -9, 21, -17, -4, 15, -5, 6, -47, 35, 45, 31, -8, -31, -10, 38, 64, -52, 30, 21, 21, 37, -34, -46, 45, 17, -42, -7, -9, 46, 25, 22, 12, -40, 13, -24, -51, 17, -50, -2, -29, -31, -52, -32, -39, 25, -55, 22, -17, -29, -3, 35, 33, 12, 13, -19, -25, 40, 18, -24, 13, -38, -11, -39, 40, -50, -34, -43, 38, 12, 44, 43, 21, -42, -37, -14, -15, -22, -32, -5, -14, 47, -24, -27, -53, 2, 38, 35, -23, 7, -25, -22, -51, -15, -10, 33, 24, 0, -38, 11, -50, -31, 14, -52, 34, 18, -44, 7, 23, 26, 31, -77, -23, 50, 16, -21, 45, 41, 44, 8, 13, 33, -19, -24, 10, 7, 18, -15, 52, 42, -26, -22, -6, -36, -16, -52, 37, -41, 58, 0, 36, 0, 69, -11, -18, 41, 34, -36, -41, 53, 18, -15, 6, -16, 19, 32, 9, 38, 55, 26, -4, 37, -40, -10, -4, -17, -29, -9, -25, -5, 1, 63, 8, 22, -3, -15, 0, 40, 38, -4, 24, 18, -6, 38, 36, 25, -25, -10, 9, -8, -11, 17, 27, 35, 29, 37, -16, 13, 2, -26, -36, -34, 43, -22, -39, 61, -37, -34, -16, 6, -6, 40, 35, 13, -51, 52, -6, 11, -1, 22, 26, 44, -5, -42, -23, -48, -26, 2, 0, 29, -29, -13, 27, -35, 18, 40, -12, -6, -8, 12, -48, 23, -15, 12, 31, 23, 34, 15, 15, -30, 16, -16, 17, -32, 16, 46, 58, 22, -46, 35, -28, -23, -18, -15, -29, -4, 44, 48, -37, -15, 48, 4, -20, 12, -24, 46, 53, 21, -15, 4, 26, 54, 12, 30, -25, 9, 52, 20, 40, -47, 6, -24, 23, -4, 20, 41, -32, -44, 11, 12, -37, 22, 9, 24, -15, -2, -15, -33, -4, -38, 51, 2, -36, 20, 4, 23, -14, -15, 25, 35, 7, 26, 40, -16, -14, 19, 27, 59, 18, -3, 17, 3, -19, 0, -44, 23, 12, 57, -29, -25, 33, 48, 53, 5, 11, 28, 31, 32, -20, -8, -60, -8, 44, -9, -20, 1, -31, 33, -35, -2, 17, -29, 8, -35, 33, 16, 35, -2, -16, 39, 66, 44, -8, -34, -22, 65, 26, 55, 22, 25, 11, 31, -4, 23, 76, 37, 31, -25, 25, -32, 0, -1, -24, 47, -20, -34, 61, 38, 10, 33, -12, -25, 17, 54, -21, 36, 55, -26, 42, 15, -41, 33, 22, 32, 21, 60, -40, 51, -2, -25, -21, 6, 12, 
  -9, 41, -16, 6, 50, 25, -10, 24, 35, 34, 25, 28, 50, -7, -9, -8, 18, -7, 28, -36, -2, 47, -19, -14, -34, 16, 30, -27, 47, 32, -14, -34, -43, -46, 37, -18, 50, -52, -8, -40, 38, -24, -13, 2, 35, 30, -11, -28, -28, 10, 17, -27, 25, -5, 50, 2, -47, -8, 27, -10, 28, 49, -37, 32, 25, 11, -12, 52, 42, -34, 22, -31, 2, -13, 9, 16, -48, 11, 1, -35, 54, -15, -9, -3, -26, -41, 41, -13, 24, 51, 13, -15, -24, -48, 9, -21, 36, 34, -19, -29, 39, -22, 6, 39, 28, -34, -10, -41, 6, -41, 25, 4, 34, -9, 1, -20, 42, 25, 50, -34, -21, 15, 35, 38, -1, 29, 34, 19, -8, -10, 40, -48, -51, 34, -44, 2, -41, 25, -43, 33, -22, -3, 7, 0, -17, -7, 36, -46, -26, 17, 5, -15, 14, 49, -37, 25, 13, 1, 31, -2, 13, 8, 19, -12, -4, 13, 14, -34, 5, 51, -31, -7, 47, -55, -17, -38, -11, -54, 11, -48, -49, 28, -4, -49, 28, 13, 23, -28, 33, 13, -22, -54, 25, 7, -8, 11, -37, -16, 48, 1, -1, -21, 50, -14, -14, -51, 17, 33, 5, 45, 30, 48, -25, -17, 18, -50, 11, 8, 15, -11, -41, -9, -35, 46, -7, 36, -19, 38, -18, 14, 53, -37, 48, 54, 28, 22, -17, -14, 22, -10, -13, 51, -17, 55, -3, -47, -11, 1, -15, -8, 18, -47, 46, -42, -20, 51, -16, -3, 28, 35, -48, -20, 45, -11, 14, -14, -22, 14, -11, 5, -14, -18, -36, 50, -41, 53, -8, -3, -15, -25, 14, 47, 29, -31, 0, 2, -49, -16, 8, 48, -37, -8, 35, 33, 48, 47, 6, 30, -7, 35, 27, 28, 6, 37, 11, 36, 37, 15, -29, 2, 49, 34, 24, -40, -47, 54, 42, 39, -7, 51, 52, 14, 7, 3, -23, 9, 14, -9, 39, -30, 4, -8, 45, -41, 5, -13, -28, 37, -39, 17, -11, -49, -48, -5, 26, -35, 30, -26, 49, -19, 19, 32, 22, -1, -9, -26, -45, -42, 36, 25, -17, -22, -28, 42, -32, 23, -39, -27, 39, 24, -18, 50, -42, -20, -10, -18, -4, 18, 0, -5, -53, 47, 3, -14, 18, 34, -9, -34, 21, 48, 42, -7, -26, -19, 39, 1, 10, 15, -17, -36, -9, -37, 18, 12, -12, -35, -37, 12, 5, 45, -6, -14, 38, -26, 5, -20, -45, 4, -25, 47, 29, 29, 44, 1, -47, -52, -21, -37, -48, -22, 42, -19, 16, 43, -41, -27, 45, 44, -51, -45, 22, 20, -22, 17, 
  -26, -43, -18, -30, -32, 52, 27, 10, 15, -28, 41, 33, 46, 54, 31, -39, 28, 52, -23, -39, -20, 29, 49, -15, 45, 32, -31, 29, -40, 21, -19, -39, -5, 29, -44, 1, -32, 4, 19, -14, -19, -10, 38, 33, 37, -14, 38, -49, 26, -7, -50, 31, -43, 24, 25, 0, 51, -11, -28, 2, -35, 14, 11, 38, 21, 20, -10, -43, 27, 26, -41, 40, 28, -23, -20, -42, -36, 22, -19, 24, 31, 54, -27, 45, -51, -42, 46, -30, 44, 28, 50, 40, 43, -5, 13, 49, -19, -42, 38, 9, 14, -16, 19, 53, -36, 43, -23, 39, -50, 0, -49, -11, -24, -40, -36, -53, 20, 29, 8, -49, -43, -3, -10, 5, -35, 22, -41, 12, 6, -2, 47, -45, -32, 45, 23, -18, 0, 12, 49, 42, 22, -22, 29, 18, 35, 43, -22, 7, -3, -32, 46, -53, -43, -1, -22, 7, -27, 31, 3, -36, -41, -50, -48, -50, 29, 43, 29, 27, -44, 29, -54, 41, -8, 18, 36, -45, -8, 31, -50, 15, 40, 32, -55, 1, 7, -38, -19, -24, 47, -34, -5, -39, 25, -22, -1, 49, 44, 38, -16, -39, 45, 13, 24, -27, -32, 46, 40, 40, -12, 42, 45, 52, -15, 0, -35, 48, -5, -53, 15, 20, -12, 10, 7, 20, 33, -8, -47, 48, 55, 44, 10, -42, -42, 22, 37, -44, -17, -25, -6, -34, 26, 6, 45, 51, -2, -16, -24, -7, -42, -9, 2, -27, 53, 12, 44, 12, -7, -27, -27, 37, -26, -32, 49, 43, -1, -7, -40, -48, -8, 52, 45, 6, 10, -11, 10, 35, -13, -25, 9, -43, 23, -21, 12, -14, 22, 23, 22, -48, 19, 53, -34, -49, -33, -39, -48, -23, 44, -9, 13, 40, 6, -9, 38, -34, 21, 5, -50, 20, -27, -14, 55, 31, -6, -15, 1, -2, -1, -14, -10, -48, 53, 25, -3, 31, -41, 20, -19, -18, -45, 35, -23, -40, -23, 8, 8, 28, -8, 23, -7, 8, 44, 29, -39, 11, 42, 25, 20, -26, 51, 47, 48, 18, -40, -38, -26, -51, -27, 4, -14, -48, -23, 35, 5, -11, -46, -1, 36, 38, 21, 17, -36, 17, 50, -20, 0, -23, -46, -29, -50, 48, -31, 2, 18, 3, 4, -43, -7, -30, -38, -3, 42, 23, -29, -28, -46, -30, -47, -38, 42, 28, -49, -36, -6, -12, 49, 50, 13, -43, -34, 50, 50, 13, 40, 44, -3, 15, 22, -11, 40, 22, -10, 25, -34, 3, 49, -10, 34, 14, 23, 16, 38, -36, 48, -53, 29, -20, -46, -37, 17, -17, 41, 12, -19, 11, 
  17, -41, 5, 38, -24, 33, 20, 48, 52, 27, -33, -21, -39, -33, -41, -16, -19, -35, 48, 37, 19, 47, -48, 10, 26, 14, -11, 36, 47, 53, -22, -29, 58, -27, 32, -46, 54, -27, 41, 3, 6, 68, -31, -37, 53, -23, 60, -18, 43, 20, -31, 60, 30, 15, 28, -10, 34, 2, 51, -16, 8, -37, 34, -15, -18, 46, -21, 1, 18, -20, 27, -10, -9, -39, -45, 14, -6, -49, -27, 4, 5, 8, -13, 4, -39, 17, 49, -44, 19, -5, -44, 14, -23, 35, -3, -16, -12, -17, -22, -36, -17, 47, -34, 22, -27, -24, -17, 28, 30, -24, 10, -35, -36, -29, -22, -46, -18, 16, 36, -54, 26, 46, 13, -49, -47, 6, 39, -45, 10, 12, 13, -35, 22, -21, 9, -24, 41, 14, -19, 2, 17, 10, -34, -28, -13, -27, 54, 12, 14, 31, 28, -50, 51, 0, -4, 44, -24, -25, -46, 45, 7, 35, 9, -17, -47, -56, 41, 6, -53, -10, -44, 41, 9, -11, 44, -30, -43, 20, 14, -39, -18, 4, 11, -8, 1, -17, -25, 58, -22, 47, 26, -33, 29, -25, -46, 37, 23, 12, 11, 9, 28, -5, 5, -4, 6, 41, 28, 22, -35, 48, -27, -21, -19, -19, -23, -42, 37, 16, -29, 33, 10, 16, -66, 57, 13, 15, 56, -26, 0, 18, 10, -39, -24, 22, -21, 26, -8, 7, -8, -38, 32, -34, 42, 16, 48, -29, -33, 10, 14, 56, -11, 14, -8, -38, 41, -31, 39, -23, -2, 60, -65, -18, 25, 51, -23, 59, -31, -4, -31, -17, -9, 23, 46, 14, -24, -22, 7, 15, 19, -36, -10, -2, 41, -42, -3, -17, -36, -41, -39, 31, 0, -12, -23, 21, -46, -3, 41, 46, 6, 21, 61, 57, 5, 8, 36, -17, -4, 43, 14, 6, 54, -24, 51, 20, 48, -32, -50, 41, 28, 45, 6, -38, 52, 9, 53, -1, -8, 6, 21, 52, -4, -13, 34, 28, 52, -29, 3, -31, -6, 18, -25, -46, 35, 58, 17, 50, -22, -3, 11, 5, 34, -24, -18, -8, 16, 47, 17, 45, -14, 33, -17, -37, 3, 19, 47, 45, 47, -10, 30, -34, -2, -40, -31, -52, -10, 1, -2, 4, -22, 50, -41, -54, -6, 42, -4, 34, 6, -7, -13, 35, 2, 14, 1, -46, -61, -57, -40, 33, -41, 4, 16, -28, 20, 2, -29, -11, 15, -48, -10, 30, -27, -14, 4, 21, -11, 63, -9, 45, -34, -38, -40, -34, 30, 33, -28, -17, 5, -5, 10, -5, 50, -42, 54, 10, -16, -7, 14, -13, 2, -15, 23, 46, 20, -16, 
  47, 10, 1, -39, -20, -21, 21, 14, -41, -32, -16, 38, 33, -2, 55, -4, -45, 42, -40, -39, 56, 50, 35, -24, -39, 15, -45, 18, -47, 33, 35, 35, -48, 37, 27, -10, -36, 31, -13, 17, 0, 44, 50, 32, 48, -49, 31, 17, 50, 24, 28, -11, 1, 42, 7, -35, 12, 14, 7, -16, -21, 16, 33, 5, 43, -37, 56, -43, -31, 50, -17, -10, -18, -31, -8, -6, -46, -22, -46, -4, -24, -27, -28, 7, 0, -21, -32, -6, 1, -9, 30, 30, -42, 18, 23, 8, 39, 43, -30, -43, -13, -15, 38, 56, -13, 50, -41, 37, 5, -48, -24, -18, 34, -11, 23, 27, -44, -22, 30, 14, -54, 18, 1, -41, 7, 42, 20, -17, -18, -19, -11, -10, 36, -34, -49, -43, -49, -5, -14, 7, 21, 20, -7, 15, -21, 30, 15, -11, -30, -27, 40, 39, -26, -28, 36, -20, -28, -22, 48, -25, -19, -47, -13, -29, -48, 50, -8, -51, -24, 4, -32, -6, -43, -1, -46, 35, -2, -42, -38, 49, 38, -25, 51, -4, 1, 7, -43, 12, -42, 17, 22, 4, -33, 15, -13, -34, -18, -45, -20, -53, -15, -10, -48, 0, -9, -30, 7, -43, 42, -1, -13, 12, -23, -42, 49, 19, -48, -40, -48, -29, 3, -47, -35, -41, -25, -6, -32, -28, -42, 54, -16, -31, 52, -24, -2, -50, -45, 42, 54, -31, 8, -34, -2, 47, 16, 5, 26, -14, -17, -4, -25, 47, 50, 13, 9, 10, 28, 4, -2, 0, -37, 46, 28, 10, 11, 30, 0, 29, 2, -18, 30, 32, 2, 25, 25, 5, 25, 34, 53, 5, -50, 13, 36, -43, 42, 13, 49, 0, -24, -2, -37, -24, 43, 0, -24, -47, -14, -23, -35, 2, -11, -41, 39, 56, 41, 17, 47, 34, 0, -30, 38, -16, -48, -4, -8, -25, 43, -49, 52, -11, 50, 26, 0, -26, -25, 4, 14, -47, 26, 48, -13, 17, 0, 29, 7, -46, -42, 39, -48, 46, 50, 25, 12, 9, 34, -5, -14, 12, -9, 48, -7, 30, 44, -24, 48, 32, -11, -19, -23, -15, 45, -30, 26, -3, 50, -48, 9, 50, -29, 40, -1, -45, 16, -41, -22, 1, -44, 29, -39, 21, -51, -15, -56, -39, -29, 6, -1, -49, 44, -35, -42, -50, -44, -28, -7, -29, -40, -36, -31, 26, -9, -54, -9, 5, 16, -1, 33, -10, -41, 47, 32, 41, 10, -23, 35, 43, 20, 21, -46, -14, -39, -6, -50, -11, 33, 49, 12, 27, -13, -45, 17, -17, -46, 42, -53, 37, 35, -49, -36, 17, 24, -47, 11, 19, 
  -16, -11, -48, -36, 10, -14, 24, -13, -24, 13, 45, 20, 22, -39, 45, -23, 15, 17, -16, 56, 17, 43, 32, -44, 4, 26, 51, 24, 20, 13, -28, -30, -34, 52, 2, -15, 27, 8, 25, 8, 5, 50, -14, 9, 17, 54, 42, -16, 51, -44, 44, -1, 50, -36, -26, 47, 57, 20, 33, -4, 2, -28, 38, 1, -37, 5, 30, 21, 55, 16, -28, -31, 57, 0, -61, 8, 37, 25, -38, -25, -20, -34, -13, 52, -28, -21, -34, 22, 16, 15, -17, -37, 10, 33, 22, -25, 46, 50, 11, -21, 29, 23, 47, 1, -22, -15, -37, -47, -38, 39, -9, -56, 27, 19, -30, -4, 16, -50, -59, 16, 44, -57, -37, -37, -18, 49, -60, 37, 9, 9, -56, -20, 6, -15, 32, 25, 36, -53, 23, 29, -7, -34, 28, -53, 23, -1, -46, 46, -19, 15, 10, -15, -11, -10, -16, -25, -24, 10, -30, -28, -37, 7, 8, 12, -2, -29, 0, -31, 11, -15, -7, -56, -26, -50, -20, -37, 18, -67, 28, -5, -33, 23, -28, 19, 14, 32, -6, 35, -43, 16, -11, -43, 3, 15, 14, -5, -54, -48, -56, -41, 17, 48, -47, -39, 21, -43, 46, 45, -22, -46, -47, 43, 41, 19, 31, 40, 6, -11, -49, 17, 16, 33, 10, 24, 25, 27, 36, 28, -31, -34, -19, -12, 17, -4, -31, 51, 45, -7, -15, 44, -39, -1, 44, 10, -27, -11, 21, 48, -4, 49, 34, 0, 20, -28, 52, -3, -1, 32, 8, 15, -26, 26, 1, 41, 5, -27, 45, -40, 45, -29, 52, 3, -42, 54, -22, -32, -25, -15, -47, 39, -46, 27, 42, 3, -10, 10, -27, -34, -14, -19, -44, -44, 31, -2, -8, -36, -14, 2, 3, 44, 4, -25, -43, -18, -22, -47, 30, -17, -22, -26, -14, -7, 50, 29, -21, -13, 45, -46, -33, 19, -39, 24, 38, 56, -39, 12, -46, 29, 18, 0, 43, -7, 42, -53, -9, 15, 14, -7, 45, 21, -24, 50, -15, 9, -38, 15, 43, -7, 41, -47, 2, -46, 12, 27, 28, -19, 46, -52, 57, 23, -44, -13, 34, 26, 35, -25, -18, 4, -41, -36, -53, -18, -10, 20, -1, -61, -28, 38, 24, 2, 33, -48, -26, -49, -27, 33, -30, 7, -48, -53, 9, 13, -18, -28, 29, 38, -11, 20, -41, -22, 23, -9, -11, 23, 40, -32, -29, 18, 3, 11, -3, -37, 9, -33, -9, -13, -37, 57, -51, 49, 37, 12, -43, 29, 2, -22, -14, 8, -28, 48, -39, 36, 35, 54, 38, 0, 35, -5, -5, -40, -25, 17, -18, -39, 
  -20, -40, -15, -47, -5, -13, -41, 1, 17, 24, 19, -30, 21, -27, -32, 32, 19, 50, 40, 14, 19, 0, -34, 29, 15, -42, 3, 13, 11, -27, -43, -28, -2, -31, -4, 34, -6, -15, 2, -3, -33, 42, 5, 16, 4, -35, 56, 52, -22, 18, 30, 44, -29, 40, 48, 18, -2, 33, -30, -20, 10, -17, 12, -51, 7, -43, -21, -26, -5, 55, 41, -33, -6, 1, 1, -56, -66, 32, 55, -11, 32, -38, -3, -43, -4, -12, 49, -49, -6, 38, 3, 24, 50, 21, -12, -51, -25, 39, 34, 34, -28, -2, 25, -46, 28, 37, -16, 20, -8, 36, -32, 24, -22, -62, -10, 58, 25, -48, 40, -9, 36, 47, 27, -44, -34, -53, 28, -28, -53, -32, 45, 57, -15, -44, 38, -41, 58, 67, 3, 58, -55, 60, 17, -37, 58, -8, 34, 56, 37, -9, -7, 53, -31, -14, -50, -28, 11, 0, 25, -48, -33, -5, -54, 23, -8, 48, 16, -21, -49, 0, -4, 22, -48, 53, -7, 45, 2, -38, -22, 36, -28, -35, -8, 12, -29, -61, -4, -31, -7, -29, 14, -54, -1, 6, -50, -46, -12, 30, 46, 35, 37, -49, 33, 14, -17, -41, 5, 5, -6, 21, 15, -46, -21, -4, -15, 32, 17, 51, -8, 19, 57, 25, 7, -73, 44, -19, 34, -9, -44, 56, 21, 30, 33, 37, 8, 56, -28, 29, -45, 37, -4, -43, -40, 54, 43, 48, -5, 9, 52, -26, 47, -27, -48, -43, -25, -36, 46, 26, 45, -50, -25, 22, -19, -2, 8, -38, 13, 8, 2, 46, -44, 54, -23, 53, 6, 22, -35, -36, -47, -52, 13, 40, -31, 32, -38, -21, -27, 27, 19, -24, -28, 7, 8, -27, 51, -42, -34, 34, 17, 48, 32, 2, -9, -27, -4, -44, -48, 9, 35, 11, 27, 2, 41, -2, -34, 44, 32, -32, 33, 51, -10, 8, -43, 3, -7, -22, 42, 21, -29, -49, 52, -5, -36, -36, 55, -1, -10, -9, -55, 34, -26, -30, 46, -13, 5, 51, 28, 21, -7, 42, -43, -32, -33, -41, -5, 22, -9, 4, -19, -13, -41, 23, -29, -12, -4, 49, -2, 3, -16, -12, -30, -33, -65, 18, 40, 28, -38, 16, -36, -41, -19, -39, 9, -27, 0, 25, -40, 1, -48, 47, 65, -33, -4, 33, -64, -38, 16, 9, 19, -22, 15, -54, 2, -29, 18, -31, -32, -56, 41, -58, -42, -38, -11, -33, -21, 47, 43, 35, -4, -22, 45, -22, 6, 34, -5, 18, -42, -23, -1, -55, -16, 4, -10, 35, -48, -48, 6, -16, 5, 29, -29, 46, 3, -23, 
  -35, -5, 48, 23, -3, -12, -1, 55, -15, -29, -12, -26, 49, 43, -23, 0, -28, -14, 19, -5, -2, 15, 16, -48, 51, 39, -41, 16, 55, 19, -33, -42, -36, -29, -23, 15, 22, -76, -40, -30, 20, 43, 60, 26, 7, -11, 0, 21, 45, 9, 19, 38, 45, 58, -43, 5, 33, 30, 19, -13, 4, 13, -20, -17, 27, 9, -41, 36, 9, 0, -47, -44, 19, -25, -38, 12, 8, 33, 47, 27, -24, 1, 51, 20, 28, -7, 49, 1, -25, -29, -6, -12, 13, -4, -43, 47, 30, 2, 29, 14, 29, 11, -29, 19, -8, -3, -19, -38, -47, -5, 45, 9, 39, 48, -16, 7, 47, -23, 13, -1, 62, -8, -11, 16, 56, 65, -25, -8, -7, -11, -36, 26, 3, -20, -15, 4, 10, 0, -5, -9, -36, -31, 5, 7, -15, 15, -37, 4, -25, -6, 2, -3, -36, 26, -5, 44, 24, 15, 25, 31, 51, -15, -46, -9, 41, -46, -11, 30, -43, 26, -39, 42, -20, -36, 48, -33, -11, 37, 6, -52, 28, -36, -42, -53, 36, -41, 21, 59, -35, 42, 24, -20, 18, 42, 27, 20, 23, 16, -11, 9, 16, 43, -22, 18, -62, 15, -2, 30, 30, -49, 26, 14, 21, 51, -25, -17, 22, -38, 25, -35, -38, 2, -6, 20, 37, 17, 54, -21, -20, 17, 34, 8, 11, 30, 33, 19, -35, -39, -16, -10, -46, 52, -44, 31, 43, -7, 48, -4, -33, -33, -34, 9, -3, 6, -11, -44, 48, 22, -23, -25, 25, 8, -33, -8, 26, 35, -38, 47, -43, 36, -39, -47, -13, 16, -14, -10, 5, 17, 38, -25, 36, 55, -13, 6, -45, -35, 36, 29, 7, 3, 56, -14, -33, -20, -30, -28, -41, 18, -34, 38, 5, -36, 35, 2, -11, -16, 23, 37, -48, -46, 6, -48, -49, -1, 6, -14, 12, -51, 20, 30, -42, 11, -22, -7, -14, -18, 25, -1, 13, 38, -42, 53, -36, 20, 3, 16, 30, -27, 25, -41, 27, 22, 31, 48, 22, -18, -31, 9, 15, -37, 35, -35, -39, 14, 6, -20, 12, -20, -8, -4, 44, -46, 37, 29, 12, -19, 9, -28, 11, 50, 0, 39, 42, 43, -15, -36, 31, 10, -32, 31, 46, -14, 39, -47, 30, -22, -22, 37, -24, 57, -30, 7, -12, 5, 15, 1, -38, 40, 46, 10, 17, -17, 20, 11, -40, -29, -33, -51, -25, 33, 30, 4, 42, 15, 12, 49, 11, 62, -3, 54, 1, -29, -9, 28, 25, -20, -32, 34, -20, -24, 60, -23, 4, 14, 48, 36, 0, 9, -13, -10, -9, 10, 16, -15, 
  -91, 51, -59, 23, -50, -1, -14, 39, -38, 15, -20, -16, -21, 56, 54, 28, -16, 44, -9, -40, 29, -4, -43, -9, 21, -31, -14, -22, -32, -41, -3, -2, -39, -49, -47, -35, 29, -75, -22, -22, -27, 19, 35, -57, 40, 27, 41, -18, 35, -21, 13, -27, -15, -24, 26, -23, 26, -5, 2, 28, -49, -47, -16, -1, 29, 21, -34, -31, 13, 7, 3, 11, 5, -19, -29, 48, -52, 18, 17, -14, 46, 4, 13, -39, -3, -41, 9, 48, 7, -31, -23, 54, -16, 48, -14, -23, 50, 25, 18, -25, 2, -26, 22, 32, 29, 31, -7, 5, 21, -12, -45, -11, 11, 25, -43, 36, 10, 50, -18, 28, 35, -31, 50, 33, -28, -34, 5, 38, 20, -38, -16, 4, 73, 55, -39, 0, 1, 3, 5, 21, 6, -47, 51, 30, 36, -65, 44, 39, -20, 0, 13, -47, 2, 32, -3, -23, 18, 3, 14, 38, 15, 48, 0, -34, 11, 42, 7, -4, 56, -13, 4, 40, -5, 31, 36, -5, -34, -11, 49, 20, 58, 21, 12, 25, -29, -84, 22, 31, -17, 45, -41, -5, 12, 22, -41, 45, -16, 28, 31, 66, -21, 19, 49, -12, -13, -18, 2, -33, 9, -33, 38, -43, 2, 36, 25, 0, 27, -26, 15, -57, 19, 11, -34, 10, -1, -59, 30, -12, -39, 28, 33, 35, -41, 30, -46, -1, -21, -45, -25, -43, 1, -30, -41, 31, 18, -7, 55, -3, -20, -18, 5, 40, -47, 26, -24, -19, 11, 44, -19, -99, -27, 46, 24, -34, 23, -2, 0, 50, -3, -39, -38, -46, 50, 12, 50, 53, 19, -45, 22, -6, 8, -22, -35, 53, 1, 10, -31, -26, -39, 49, -39, -11, -48, 43, -42, 11, 4, -21, -4, 39, -14, 14, -12, -8, 24, 0, -12, -40, -38, -21, 4, -10, -1, -11, 35, -1, -29, -49, -50, 50, 5, 15, 14, 9, -22, -46, 36, -20, -20, 0, -10, 21, 52, -62, -13, -11, 45, 48, 56, 22, 38, -34, 18, 18, -27, -12, 48, 29, -16, 44, -21, 22, 19, 36, -35, 3, 3, 51, 33, -39, 6, 28, -31, -7, -2, 30, -8, -34, -34, -26, -1, -37, -48, -21, 3, -28, 58, -34, 53, 59, -49, 7, 40, 31, -5, 10, -19, 64, 48, 52, -35, -34, 5, 24, 73, 12, -23, 53, -21, 18, 13, 40, -9, 37, 39, 38, 50, -54, -9, 36, 6, -50, 34, -24, 17, -36, 12, 26, 33, -11, -2, 39, -3, 7, 48, -42, -41, -13, -47, 27, -58, 42, -4, 2, 39, -24, 18, -22, 5, -18, -38, -6, 9, 48, 
  -63, -13, -38, 20, -1, -26, 39, -32, 42, -29, -17, 38, -21, -3, -40, 55, 3, 10, -16, 29, -32, -34, -27, 22, -42, -4, -4, 25, 14, -18, -38, 25, -3, 27, 23, -51, 22, -61, -27, -5, -52, -60, 15, -17, -12, -39, -33, 34, -19, -12, 17, -16, -44, 29, 0, -28, -8, -35, -6, 11, -48, -14, -10, 51, -33, -40, -31, -38, 38, 10, 36, -18, 0, 29, -8, 1, 6, 39, -34, 26, 53, -23, -23, 32, -41, -21, 6, -23, 48, -39, 58, 6, -21, 45, -29, 3, 6, 51, 42, 0, -46, -22, -18, -41, -37, -42, 32, -50, 44, 5, -39, -59, 55, -9, 29, -20, 20, 12, 10, -3, 22, 35, -7, -34, -30, -5, 33, -29, 77, -3, 26, -7, 76, 30, -57, -1, 26, 24, 34, 1, -1, -5, 4, 7, -26, 12, -40, 24, -2, -16, 7, -16, -26, -32, -21, 21, 13, 61, 54, -42, 48, 24, -54, 9, -33, 11, -30, 33, -35, 36, 31, 53, 39, 40, 31, -25, 49, -8, 10, 15, 29, 51, 6, -47, -22, -16, 28, -1, 34, 5, 20, 48, 18, 8, 42, 21, -6, -36, 32, -40, 9, 25, 43, 7, -24, -7, -30, 15, -40, -8, 27, -39, -27, -40, -25, 9, -12, 15, 3, 15, -34, 1, -32, 56, -46, 6, 18, -26, 33, -17, -9, -6, -5, -3, -29, -22, 29, -14, 10, 33, -4, 18, -15, -18, -17, 42, 46, -38, -14, 1, -47, -26, -13, 27, -48, 0, 24, -26, 23, -125, -5, -37, 35, -31, -18, -19, 52, 38, 32, -34, -28, 29, -36, -7, -15, -5, -25, 52, -7, 53, -7, -33, 44, 21, 14, 22, -13, -10, -40, -10, -46, 56, -46, 31, 34, 48, -42, 40, 23, -11, -5, 43, 14, 44, 44, 0, -17, -21, -24, 37, 42, 11, 48, 36, -17, -36, 1, 50, -46, -40, -42, 32, -43, -33, -34, -48, -37, 39, -5, -33, 54, 18, -35, -60, -27, -32, 26, -5, 49, -9, -37, -36, -17, 8, 35, 20, 33, -14, -21, 58, -8, 26, 28, -32, -39, 36, 61, 51, 0, 43, 4, 1, 16, -25, 35, 32, -42, 59, 52, 50, -16, -36, -17, 9, 27, 6, 38, 17, -33, 49, 43, -20, 24, -37, 10, 23, 47, -19, 45, -15, -19, 10, 45, -4, 16, 20, 31, 38, 54, 25, 20, 32, 2, 36, -29, 38, 0, -57, -54, -21, -30, 0, -16, 33, 18, -10, -7, -38, 25, 9, 20, -20, 26, 41, 26, 16, -11, 46, 33, -5, 34, 2, 43, -7, -37, -43, 29, 55, -11, 38, 26, 29, 17, 53, 
  -30, 36, -10, -26, -43, 1, 3, 23, -26, 33, 21, 8, -18, -38, 52, 48, 40, -19, -30, 41, 21, -37, -46, 50, 42, -38, 27, -2, -13, -13, -14, -47, -35, -16, 20, -4, 29, -99, 67, -18, -26, 20, -12, -55, 14, 21, 9, 5, -18, -4, 35, -35, 43, -22, -7, -36, 6, -20, -42, -28, -12, 24, -6, 3, 26, -49, -6, 32, 26, 26, -20, -46, -25, -11, -13, 55, 7, -9, -43, -27, 5, -26, -45, 35, 11, 31, -40, -16, 18, 20, 6, -42, 5, -19, -35, 17, -6, -3, -31, -18, 33, 26, 15, -27, 15, -7, 18, -45, -20, -2, -38, -48, 47, 8, -13, -46, 60, 32, -21, 62, 37, 37, 13, 46, -35, 59, 55, -35, 70, 14, -22, -5, 15, 33, 59, -11, -26, 31, 32, -8, 29, 46, -5, -23, -17, 21, 29, 5, -39, 5, -36, 12, 51, -1, -9, 44, -23, 35, 53, 20, -22, -19, 51, 9, 11, -23, 34, -3, 41, -1, 11, 16, 5, -45, -16, 50, 52, -4, 60, -7, -21, -34, -1, 7, 19, 10, 52, 22, -20, 16, -29, 42, -10, -38, 11, -42, 23, 38, 25, 34, 37, 9, 31, 46, -25, 14, -11, -13, 2, 43, 4, 30, -40, 11, 5, 34, -34, -31, 10, 44, 15, -52, -29, 15, 14, 23, -54, -17, 17, 11, -31, 45, -20, -13, -33, -47, 4, -20, 34, 13, -10, -46, 22, -9, 20, -45, 12, -12, 33, 9, -49, -40, -9, 24, -23, 28, -42, -35, 32, -25, 8, -40, -4, 7, -55, 13, -17, -32, 30, -5, 35, 22, -14, -35, 10, -42, -49, 42, 54, -47, 41, -52, 42, 43, -1, 42, 45, -15, 8, 26, 45, 44, 8, 24, -11, 26, -27, 32, -35, 30, -22, -24, 44, -15, -20, 23, -31, 32, -29, -8, -33, -27, 0, 20, 34, -24, 44, 31, 19, 50, 0, -24, 37, 31, 2, -40, -6, 52, -14, -11, -29, 44, 31, -20, -50, 27, -10, -12, -25, -26, 28, -21, 14, -27, -38, 28, -18, -40, 9, 1, 4, -1, 67, 42, 5, -28, 62, -22, -16, -48, 2, 46, 19, -40, -24, 36, 32, -36, 35, 3, -37, 51, 26, -5, 15, -21, 66, 19, -37, 49, -5, -9, 32, 32, 42, -36, 39, 49, 45, 43, -45, 11, 20, 25, 22, 9, 20, -19, 36, 21, 47, -36, -42, -27, 2, 52, 36, -3, 36, 28, 6, 4, -29, -35, -28, -16, 16, 1, -32, 7, 19, -13, -37, 0, 12, 19, -12, -56, 0, 31, -18, -64, 23, -37, -58, -12, 11, -61, 22, 24, -29, -16, -19, -7, 
  -8, 45, -18, -53, 11, 48, -24, 58, 19, -11, 50, -10, -23, -3, 51, 10, 34, 42, -4, 29, 58, 11, 44, -3, 4, 22, -13, 46, 45, -19, 47, 32, 8, -31, 10, 26, -44, 23, 46, -45, 30, -6, -3, 42, -41, 0, 57, 11, 6, 52, -6, 52, 56, 33, -18, -19, 13, -25, 19, 43, 25, -43, 12, 24, -34, 0, 20, 5, 1, 41, 47, 60, -1, -4, 48, 18, 43, -54, -43, 27, -40, 13, 34, -5, 29, 61, -10, 40, -8, -38, -25, 48, 41, 4, 3, 30, 40, 9, -12, -18, -10, 2, -12, 27, 56, 5, -22, -6, -15, -37, -31, -37, -13, 20, 16, -29, 30, 44, -34, 38, 7, 19, -17, 12, -15, 43, 37, -19, 41, -24, -34, 29, 42, -14, -47, -38, 3, -35, 22, -5, -11, -44, -42, -31, 15, -6, -46, 42, -29, 24, -15, -32, -49, -45, 35, -7, -36, 9, -12, -9, 24, -38, -11, -15, -47, -6, 15, -33, 8, -48, -23, 18, 25, -25, 41, -47, -22, 2, 42, 34, -18, 45, 47, -5, -3, 29, -34, 0, 10, 14, 17, -15, -47, -11, -20, -44, -5, 29, 23, 18, -3, 0, 2, 48, -20, 43, 7, 49, -49, -50, 35, 32, 2, -23, 11, 19, -7, 49, 32, -27, -21, 38, 26, -24, 6, 28, 30, 31, 26, 27, 13, 16, -43, 44, 45, 41, -14, 36, -34, 5, 22, 22, -16, 17, 53, -11, -24, 57, 26, 56, -47, 0, 13, -7, -18, 22, -4, 10, -27, -39, -12, 55, 28, 21, 43, 24, 15, 30, -7, -36, 4, -9, -29, -22, -34, 58, -18, 50, -36, 31, 41, 19, 9, -35, 40, -12, 40, -24, -14, 0, 20, 55, 44, 44, -1, 24, 19, 38, 4, -4, -15, -15, 32, -26, 32, 39, 20, 56, 57, -35, -13, -30, -36, 14, -4, 57, 32, -45, 8, 43, -9, -18, 28, -34, 38, -24, -10, -14, -19, 45, 37, 32, -14, 16, -4, -24, 44, -28, -43, -40, -1, -61, 41, -57, 6, 6, 9, -48, -4, -29, 11, -34, 30, -56, 9, 6, -36, -61, -34, -49, 15, -38, -55, -31, -5, -44, 21, 26, 8, 42, -12, -29, -17, 25, -38, -8, 6, -13, -46, -12, -7, 16, 39, 38, 17, 0, 41, -26, -17, -12, -34, -8, -57, -8, -51, -57, 20, -1, -54, 2, -13, -54, -53, -13, -7, 7, 22, 21, -10, -11, 12, -39, -43, -7, 36, -44, -1, -31, -58, 20, -26, -14, 38, -61, 38, 20, -10, -51, -46, 24, 19, 38, -59, 18, -12, -11, -2, -63, 32, 20, -58, -44, 22, -22, 
  -31, -9, 32, -33, 63, -40, -37, -47, 25, -19, 17, -20, 19, 19, 22, 30, -17, -2, -30, -16, 34, -53, -13, 28, -7, -45, 26, 6, -9, -56, -29, 29, -13, 38, -5, 13, -38, -62, 13, 30, -6, -17, -7, 21, -21, 12, 5, -21, 50, 20, -42, 44, -31, 8, 17, 35, 10, -44, -38, 33, 43, 11, 53, -47, 27, 35, -49, 31, -37, -1, 46, 39, -9, -4, -8, -46, -5, -25, -10, 33, 47, 22, 48, 17, 32, -32, 25, 24, 25, 16, -27, -9, 14, 31, 48, -16, -3, -53, -16, -56, -29, -2, 23, 49, -20, -20, 5, -16, 45, -39, -19, 37, -12, 63, 5, 23, 3, -27, -30, -56, -48, -23, -21, -37, -8, -11, 27, 51, 15, -9, 26, 9, -34, 16, 25, 35, -48, 35, -31, -4, -47, 2, 45, 14, 45, 6, 10, 32, -34, 16, 17, -12, -6, 21, -16, 33, -2, 8, 31, 25, 50, 55, 16, 21, 7, -18, 6, 21, -32, 17, -42, 55, -22, 20, 19, 29, 37, -27, 24, -57, 12, -39, 11, 55, -22, -23, 31, -3, 18, -12, 13, 13, -49, 11, 60, 15, -6, 13, 25, -39, 40, 25, 2, -15, -35, 50, -17, 59, 10, -16, 74, 7, 55, -34, 17, 54, 53, 47, -25, 7, 33, -32, -58, -38, -8, 55, 62, -26, -29, -6, 26, -41, 46, 14, 36, 11, -23, -15, 42, -45, -19, -24, -24, 29, -45, -19, 5, -7, -28, -9, -42, -4, -16, -29, -22, 34, -39, 16, -13, 8, 3, -16, -9, 28, 33, -24, 42, 30, 38, 20, 46, -43, 27, 35, -49, 27, -11, -3, -8, -36, -34, 15, 6, 50, -49, 54, -5, 40, -47, 15, -1, 25, -17, -19, 59, -8, 3, -9, -31, 63, 3, -21, 5, 14, 13, -36, 23, -7, -24, -29, 27, -48, 0, -29, -51, 44, -36, 32, -4, -42, -41, -27, -5, 32, 23, 19, 34, 21, 44, -26, 32, 11, 13, -58, -25, 43, -30, -21, 44, 33, -42, 31, 64, 42, 4, -22, -10, 46, -29, 34, 17, 46, 18, 59, 18, -21, -4, 26, -14, 65, 58, 38, 11, -20, -11, -6, -40, -18, -20, 44, 26, 28, 16, -43, -25, -41, -51, 0, 18, -2, -40, -1, -22, 38, -10, 19, 12, -10, -2, 30, 1, 35, -32, -70, -11, -42, 23, 3, -2, -1, -33, -53, 22, 16, -42, -54, 18, -35, -42, -4, -9, 5, -41, -20, -15, 2, 34, 65, -42, 38, 14, -16, 2, -6, 49, 8, -2, -14, 29, -40, -31, 31, -4, 13, 21, 58, 48, -5, -23, -20, -26, 47, -32, -38, 
  17, -36, 6, 50, 42, -8, 41, 11, 29, -10, -40, -10, 33, -42, -39, -18, 28, -34, 44, 1, 20, -38, 30, 8, -55, 40, -45, 23, 41, 41, -5, 27, 23, 16, -11, -26, -39, -9, -22, -28, 21, -7, -35, 41, -45, 10, 30, -12, -38, 23, -13, -24, 47, -26, 31, -21, -45, 38, 33, -54, 14, -39, 41, -41, -15, -1, -19, 41, -36, -37, 0, -11, 8, 23, -7, 18, 83, 24, 26, -47, 40, -27, -47, 5, -34, 16, -25, -47, 41, -49, -40, -25, 30, 40, 8, -56, 7, 21, -21, 43, -37, -43, -35, 42, 44, 28, -20, 31, 26, -1, -17, -45, -6, 21, 5, 22, 18, 7, 34, -1, 29, -38, 11, 19, 27, 56, 10, -56, -54, -13, -6, -7, -43, -28, -17, 27, -6, 34, 68, 40, 52, 37, -1, 33, 9, 7, 62, 39, -28, -21, 46, 25, 14, -25, -38, 11, 8, -54, 40, 32, 24, -27, -39, 67, 33, -8, -83, -37, -44, -52, -33, -55, 8, -39, 45, -3, -14, -23, 24, -33, 33, -45, -14, -17, -40, -34, 23, 17, 15, 49, 57, 45, 5, 3, -33, 53, -9, 8, -37, -19, 5, -34, -13, -26, -4, 46, 13, 59, 36, -15, 31, -22, -34, -36, -43, 49, -26, -28, -31, 28, 42, -6, -33, -29, 41, 33, 32, 7, 25, -19, 1, -9, -15, 31, -15, -7, 27, 29, 20, -39, 6, -17, 13, -48, -27, -17, 12, 0, 40, -17, 50, 47, -11, 30, -42, -17, 6, 51, -5, -34, 38, -27, 3, -14, -19, 3, 17, 18, -12, -36, -13, 44, 54, -44, 41, 36, 21, 50, 58, 31, 42, 18, 49, 44, 7, 58, 10, -16, -14, -38, -22, -27, -7, 16, 44, -26, -45, 19, -20, -26, 39, -1, 45, 23, 5, 36, -5, 28, 36, 46, -22, -19, 33, 24, -37, -32, -40, 34, 18, 0, -1, -48, 21, 36, 33, 14, -40, 9, -39, 17, -55, 44, 12, -12, 15, 37, 40, -5, -23, 47, 59, -43, 53, -19, 7, -17, -32, 14, 47, 3, 4, 1, -6, 7, 1, -47, -23, 38, 39, 27, -33, -30, 32, -60, -16, 3, -11, 0, -20, 32, -3, -36, 28, -21, 33, -6, 37, 37, 52, -28, 35, -28, 12, 44, 30, 10, -20, 41, 33, 8, 19, -16, -22, 26, 1, -35, -20, -18, -45, -4, -18, 21, -81, 8, 59, -11, 30, -14, 24, -28, 31, 21, 8, 31, -3, 7, -45, -17, 39, -10, -44, 9, -14, -38, 41, 35, -5, -10, 24, 34, -4, 7, -38, -5, 28, 41, 2, -4, 6, -30, 29, 2, 11, 2, 
  -5, -33, -44, -36, -20, 27, -13, -50, -21, -49, 33, 9, -10, 46, -9, 40, 5, -5, -46, -12, -32, -22, -15, -32, -46, 45, 8, 45, -17, -6, 41, -31, 39, -7, -38, -7, 53, 32, 48, -32, -47, -39, 5, 49, 54, -7, -43, -30, 21, 48, -15, 16, -19, 30, 28, -22, -28, 42, 37, 12, 4, -6, 17, 1, -9, 45, -9, 51, -13, -41, -48, -45, 19, -22, -47, 29, -7, 49, -29, 45, -13, -4, -43, -39, -38, 50, -14, -29, -7, 38, 29, 26, 39, -15, 36, -24, -48, 22, -42, 40, 27, 43, 27, -27, -26, -12, -17, 34, -9, -41, 12, -9, -15, 32, -45, -32, 6, 45, -21, 28, 2, -42, 10, 13, -36, 47, 42, 3, -33, -15, -5, 9, -33, 46, 5, -25, -47, -49, -29, 21, 27, -20, 40, 38, -49, -51, 8, 48, -37, 35, -1, -12, -16, 35, 21, -7, -35, -1, -21, -22, 38, 43, 32, -43, -13, 1, 46, -32, -53, 6, 34, -17, 7, 40, -42, -12, 37, -23, -20, 30, -28, 50, -34, -29, -21, 24, 44, -5, -11, 29, -13, -2, -56, -41, -40, -46, -19, 49, -33, -26, -22, 32, 0, -28, 31, -34, -32, -21, -10, -54, 19, 51, -53, -21, 32, -12, 20, 12, 52, 27, 40, -49, -33, 34, 45, -21, 11, 21, -32, 8, -10, -2, 42, 25, -51, -20, -20, 43, -26, -49, -12, 28, -2, -23, -23, -21, -24, 29, -46, -10, -8, -8, -34, 35, -8, 20, 23, -28, -5, -36, -24, -40, -45, 51, 23, -10, 50, 41, 28, 55, 14, -29, -42, 55, 18, 20, 3, -33, -13, -22, 30, -14, 51, 18, 38, 41, -29, 9, 30, -21, 21, -43, 51, 50, -2, 34, 28, 26, -2, -9, -28, -40, 43, 14, 26, -11, 44, -6, -34, 47, 14, -23, -32, 47, 18, -7, -16, -24, -22, 14, -17, 14, 6, -12, -43, 31, 31, 31, 3, 24, -41, 39, 36, -69, -19, -30, -36, -4, -45, 38, 37, 19, -49, -45, -28, 19, 11, -48, -23, 13, -49, 40, 10, -52, -15, -37, 13, 44, 50, -17, 33, 1, -20, -53, -28, 13, 5, -3, 11, 29, -35, -23, -43, -49, 38, -12, -51, -10, -52, -19, -52, -30, 35, 15, -39, 21, -41, -22, 25, -16, 20, -23, -25, -3, 51, 43, 38, 41, 4, -19, 36, 4, 16, -18, -3, 45, 23, 23, 23, 27, 21, -48, -36, 16, -47, 8, 29, -56, -41, -27, 45, -33, 10, -4, -12, 22, -24, 6, -36, 32, 12, 39, 40, -30, 45, 48, 33, -8, 24, 2, -15, -6, -24, -1, 
  40, -15, 14, 4, 50, 29, -40, 27, 26, 19, -44, 40, 33, -16, 19, 47, 6, -15, -19, -24, -1, -18, 14, 21, -23, 14, 35, -19, -9, 36, -32, 0, 35, 8, -6, 21, 8, 16, -21, -4, -29, 51, -1, 26, 36, -9, 21, 17, -36, 28, -5, 18, 22, -22, -29, 38, -46, -12, 19, 21, -14, -13, -31, 6, -13, -4, -35, 23, -53, -1, 14, -3, 11, -7, 3, 3, -17, -10, 28, -7, 27, -8, 2, -8, -12, -2, 12, -5, -9, -29, 23, -10, 54, -25, -2, -5, -34, 36, 27, -51, 2, -35, 24, 7, 25, -44, 8, 36, -46, -8, 13, -22, -17, -34, -26, 13, 15, -10, 44, -24, 0, -44, -19, 6, -25, 27, -19, 25, -5, 38, 60, -29, -26, 9, 24, -10, -17, 50, 27, -15, -4, -6, 43, 29, 22, 2, -15, 10, -3, 21, 25, -23, -7, -7, 12, -52, 7, -29, -13, 40, -19, -15, 32, 18, 13, 18, 14, -31, -17, -45, 10, 28, 7, -8, -1, 37, 24, -11, 9, 1, -15, -2, 9, 3, 10, 2, 11, 10, 13, -24, -21, 40, 8, 43, -42, -17, 50, -31, -29, 56, -28, 56, 1, 13, -11, 9, 37, -18, 17, -29, 10, -17, 25, 31, 41, -31, 52, -2, 3, 23, -1, -19, 25, 17, 16, 54, 37, 17, -52, -12, 30, -65, 34, 56, 34, -20, -18, -1, -44, 18, -24, 24, 25, -16, -9, -20, 3, -30, 22, -18, 37, 4, -3, -28, -45, 19, -38, 20, -3, -45, 12, -37, -4, 21, -6, 2, 52, 35, -27, 9, -24, -20, 2, 19, 12, 1, 54, 42, 11, 16, -19, -30, -23, -27, 2, 38, -12, 30, 28, 8, -33, -30, 6, 36, -33, 15, 13, 30, -24, 22, 13, 48, 31, -3, -16, -13, 4, 60, 0, 5, 37, 27, -27, -10, 2, -13, -7, -11, 28, -10, 16, -10, 26, 26, -27, 24, -43, -6, -23, 22, -29, -29, 44, -19, -4, 14, -22, 22, -8, 59, -14, 38, -15, -16, 14, -44, -7, 0, 69, 27, -22, 16, 7, -25, 26, 15, 14, 10, 12, 20, -38, 40, 7, 7, -6, -9, 49, -2, 11, 14, -8, -54, 28, -12, -2, -33, -11, -16, 27, 29, -42, -27, 38, -10, -36, 4, 36, 16, -27, 41, -15, 18, 18, -5, -10, -42, 23, -3, -5, 37, 25, 26, -26, 28, 27, -16, 45, 13, -53, 65, 0, -1, 22, -74, -27, 18, 24, 13, 35, -37, 45, -23, 21, 28, 34, -29, 16, 22, 10, 28, -28, -9, 15, 23, 1, -7, -6, 17, -1, -35, 26, -33, -7, 3, 
  -15, -21, -33, -13, 37, 20, -2, -16, 31, -18, -21, -26, 41, -44, -23, -22, -5, -9, 43, 38, -48, 41, -41, -27, 22, -23, -5, -8, 3, -6, 51, -48, -11, 4, -45, -38, -5, -8, 29, -37, 5, -30, 25, 24, 34, -1, 9, -10, 25, 40, 25, 15, -23, 12, 3, -17, -15, 3, -24, -12, 33, 49, -16, -25, -31, 47, -31, -7, -14, 47, -7, 50, -2, 30, 35, -49, -12, -15, -44, -44, 12, -32, -19, 10, 23, 48, 23, 43, 25, -36, -42, -37, 53, 44, -20, -21, 6, 50, 41, 8, 44, 37, -21, -24, -21, -36, 50, 18, -37, 38, -20, -50, 10, 23, 33, 37, -43, 24, 20, 46, -18, -46, -23, -27, -43, -51, 30, -48, -14, 51, 32, -28, 0, -31, -14, -20, 48, -47, 5, -21, 23, 32, -49, -34, -2, 37, 7, -6, -11, -4, 15, -20, -21, -51, 31, -38, 34, 49, 1, 47, -10, -32, -42, -30, 45, 23, -40, 27, 39, -25, 45, 5, 13, 32, -52, 5, 19, 0, 1, -29, -34, -26, 34, -47, -37, -24, 40, -40, -46, 12, 3, -35, -41, -12, -12, -19, -15, -38, -52, -19, 14, 16, -2, 9, 16, -44, -21, -22, -28, 34, 20, -19, -51, 44, 41, -34, -27, -4, -52, -47, -22, -15, -29, 0, 42, 24, -1, 14, 15, -18, -6, -16, 34, -7, 37, 44, 10, 48, -11, -29, -20, -12, -45, 7, 8, -25, -27, -7, 11, 51, -33, -11, 21, 10, -18, 26, -28, 28, -23, 28, 27, -48, 0, -45, 19, 53, 6, 9, -50, 18, 51, 11, -21, 24, -15, -49, 26, 48, 23, 53, 20, 8, -53, -45, -6, 45, 4, 36, 31, 41, -38, -33, -1, -26, -37, -6, -8, 39, -51, -7, 26, -19, -18, 12, -40, -2, 39, 42, -37, -13, -7, 53, -50, 48, -44, -17, 16, 19, 18, 5, -35, 30, 33, 0, 37, 32, 37, 25, -8, 46, -1, -3, -47, 41, 27, 47, -7, -9, -33, -1, 36, 21, 6, 50, -12, 34, -29, 32, 4, 24, 40, -12, 0, 30, -34, -19, 2, 9, 37, -45, -34, 38, -18, 33, 14, 42, 12, -16, -3, -26, -39, 45, 37, 26, 14, -24, 51, -24, 37, 29, 44, -28, -34, -3, -9, 7, 8, 28, 9, -50, 38, -42, 38, -35, 40, 41, -34, -22, 30, 43, 22, 3, -41, -41, 6, 35, 22, -45, -4, -44, 22, -18, 35, -14, -8, 8, 0, 24, -23, 25, -5, -43, 24, 23, 24, 36, -42, 38, -30, -52, -7, 12, -18, 26, 48, 31, 23, -16, 7, -14, 43, 27, 14, 5, 
  -85, 10, 39, -1, 46, 22, -8, 54, 21, -37, -19, 9, 44, 20, -38, 46, 45, -33, -54, -34, 47, 0, -22, 47, 10, 37, -9, -17, 52, 13, 8, 49, 25, -20, -5, 33, -25, 38, 49, -15, -2, 55, 38, 41, -8, 30, -19, -10, 30, 33, -12, -31, 28, -41, 30, 11, -48, -15, 40, 26, -44, -46, -41, 28, -44, 51, -12, 23, -44, -28, -23, 46, -18, -47, -9, -11, -6, 42, -5, -2, 20, 18, 22, 17, -48, 47, 28, 18, 6, 1, -15, 23, -11, -56, 28, 34, 28, 14, 35, -8, -26, -51, 34, -16, 2, 21, -7, -47, -12, 42, -50, -30, -24, -27, -17, 45, 24, 8, -30, 38, 38, 54, -28, 29, 33, 20, -26, 42, 12, 57, 57, 32, -29, -1, -17, -44, 36, 43, 6, -11, -23, 20, 21, 11, -35, 47, 7, -25, 9, -56, -9, -27, 28, 43, -54, 19, 6, -5, 36, -31, 9, -13, 29, 4, 7, 50, -22, 15, 2, -1, -33, -6, 35, 37, 33, 6, -29, -57, 0, -44, -13, 22, 35, 20, 29, 14, -7, -5, -9, -22, -9, -29, 8, -18, -30, 16, 25, -3, -55, 43, -32, 45, 48, 28, 41, 29, -1, -26, 72, -24, 73, 31, 49, -10, 42, -16, -26, -46, 34, 58, 12, 16, 22, 17, 53, -34, 56, 21, 29, -32, 16, -1, -6, 8, 44, -23, -18, -8, -24, -41, 39, -11, -8, -17, 30, 2, 32, 23, -43, 20, 24, -22, -37, -14, -45, 54, -46, -42, -14, -16, -19, -23, 50, 50, -25, 3, -3, -27, 9, -38, 11, 0, 35, -10, 23, 51, 11, -51, 12, 24, -49, 33, -3, -15, 47, 15, -42, -37, -12, 26, -5, -3, 11, -36, -11, 6, 8, 18, -52, 11, 19, 36, -47, -9, -28, 33, 37, 16, 9, 28, 42, -54, 36, 23, -18, -21, 31, 5, 5, 47, 13, -13, -31, -5, -24, 0, -2, 29, -8, 20, -15, 1, -4, -16, 22, 2, 43, 47, 41, 26, 14, -13, 36, 86, -27, 20, -74, 15, 17, -6, 23, 35, -18, 1, 28, 17, -26, 38, 17, -31, 51, -39, -7, 19, -24, -15, 28, 47, 39, 23, -21, -50, 12, -31, -20, 27, -7, 18, 2, 12, -23, 50, -10, 25, 39, -36, -8, -24, 39, 38, -9, 52, -17, 13, -23, -22, 18, -6, -45, 26, 5, 8, -31, -31, 35, 15, 10, -16, 43, 14, -29, -9, -53, 11, 42, 35, 8, 53, 52, -20, 46, -2, 38, 1, 40, 28, 62, -53, 51, -42, 35, 45, -28, 15, 15, 9, 44, 37, 49, -41, -17, -32, 22, -19, 
  19, 41, -49, -5, -40, 10, 15, -10, -10, -33, 29, -21, 22, -16, 57, 51, 42, 6, 53, -27, -41, -25, -35, 51, 52, -34, -19, 19, -12, 10, -8, 21, 23, 10, 59, -23, 31, -81, 1, 34, -21, -47, 12, -18, 45, 8, -19, 33, -33, -39, -30, 16, 52, 23, -34, 7, 20, 52, 36, -34, -38, 41, 46, -31, 20, 57, -29, 61, 31, -20, -7, -30, 4, -28, -14, -21, 32, 18, 41, -37, 51, -6, 34, 56, 57, 9, -40, -15, -7, 0, -31, 57, 51, 44, 42, -15, 15, 21, -41, -7, 35, 50, -20, -20, -42, 55, 35, -19, -35, -9, -38, 27, 10, 35, 1, 32, -26, -39, -59, 26, -23, -51, -6, -45, -23, -15, 18, 0, 27, 4, -12, -27, 42, 29, -23, 17, -15, -38, 37, -39, -41, 32, 35, 9, -56, -14, 33, 46, -25, 1, -46, 20, -22, 9, -30, -50, -12, -30, 19, -55, -11, -13, 34, 1, 16, -8, 9, 45, 46, -31, -52, -54, 22, -33, -15, -51, 9, -1, -55, 28, 0, -21, 31, -16, 34, 7, -24, 7, -52, -52, -1, -18, -63, -7, 40, -3, 23, -7, -48, 15, -6, 45, -34, -40, 18, -3, -33, 33, 18, -22, -49, 36, -52, -4, 36, 24, 9, 7, 7, 8, -5, 17, -76, -24, -19, 20, 45, -46, -23, -41, -21, -2, 27, 18, 26, 35, 21, 56, -25, 15, 17, 29, 19, -32, -11, 20, -46, 15, 13, -9, 35, -3, -48, 53, 57, -32, -43, -41, 48, -49, -38, -5, -37, -10, -42, 16, -23, -33, -19, 51, 49, 44, -32, 33, -34, -30, -21, -9, 25, -39, 6, 50, 18, 20, 36, 40, 44, -15, -45, -21, 49, 20, 50, -18, -6, 7, -19, 6, -24, -52, -24, 21, -11, 37, 43, -1, -33, -18, -2, 47, 43, 46, -36, 29, -26, -8, -15, -2, -2, -34, -1, 12, -35, 18, -4, -19, 11, 53, 59, 55, 3, -25, -5, -28, -42, 42, 28, 17, -25, 2, 40, -21, 36, 45, -35, 25, 11, -21, -1, 54, 34, 35, 58, 41, 1, 40, 48, -44, -12, -23, -23, -11, 9, -43, 20, -48, 22, -34, 1, -8, -30, 13, 6, 27, -63, -16, 25, -14, 19, -33, 22, -32, 27, -14, -45, -24, 46, -42, -38, 36, -34, -37, -36, 1, -44, -57, -4, -22, 31, 20, 6, -17, -11, -21, -27, -44, 22, 13, 47, -11, -57, -37, 11, -18, -12, -27, -22, 15, -64, 7, -24, -41, -15, 5, 45, 14, 28, -34, -20, 36, 39, -53, 14, 29, 34, -20, -7, -18, 34, -50, -7, -26, -1, -36, 
  12, -1, -30, -22, -6, 41, -42, 45, -10, 3, -2, -41, -30, -16, 14, -38, 39, -31, 2, 45, -11, 48, 41, 22, 43, 7, 15, -33, 16, 4, 38, 18, -37, 17, -47, 22, 13, 14, -42, 44, -34, -44, 4, -3, -12, -35, -30, 38, 4, -8, 52, -48, 40, 44, -41, -41, 44, 50, 29, 4, 24, -32, 9, -40, -45, 56, 36, 44, -16, -6, -49, -33, 23, 56, -31, -30, 33, -9, 30, 0, -48, 26, -26, 38, -14, -24, -21, 4, -11, 10, 50, 45, -48, 24, 23, 18, 23, -33, -48, 24, -45, -8, 49, -45, 29, 2, -8, -47, 25, 18, -17, 14, -31, -16, 30, -18, -30, -40, 38, -17, -1, -16, 25, 19, 39, -16, 6, -10, 52, 7, -19, -36, -7, 23, -32, 33, 34, -28, 44, 18, -1, -18, 14, 17, 48, 34, 14, 38, -61, 23, -1, -30, 15, 42, -15, -5, 1, -26, -19, -5, 16, -18, 27, -6, -10, 17, -16, -7, -22, -14, -32, -11, -33, -25, 32, -9, -18, 43, -9, -36, -17, 44, 16, -18, 19, 5, -51, 22, -1, 10, -40, 52, 4, 47, 4, 24, -46, -31, -26, 40, -50, 51, 26, -22, -40, -14, 1, -27, 35, -42, 0, -10, -27, 1, -18, -35, 4, -25, 29, -11, -26, -49, 1, 4, -7, 43, 18, -21, 17, 47, 30, 0, -40, -16, 49, -19, -10, 31, 18, 14, -2, -7, 21, 12, 31, -23, -25, 30, -44, -32, 2, -35, 55, -36, -45, -15, 15, -27, -10, -21, 22, 2, 25, -30, -21, 5, -46, -48, 15, -45, 25, 31, 6, -3, 39, 3, 2, 0, -37, 50, -45, -26, 25, -26, -14, -12, 22, 19, -36, 42, 50, -7, 44, -32, -22, -42, -27, 53, -15, 9, 32, 7, 38, -13, 31, 13, -43, -3, -13, -34, -39, -18, -48, 53, -26, -13, 10, 52, 32, -17, 28, -3, -21, 13, -2, 55, 37, 34, 5, -45, 54, -32, 48, -12, -38, 3, -16, -12, -30, 43, -6, 47, -23, -23, -21, 2, -23, -9, -2, 15, -16, -35, 51, -3, -11, 50, -5, 41, -11, 18, 13, -40, 19, 9, -25, -19, -11, -46, -26, 23, 15, 38, 38, 45, -3, -28, 21, -27, -9, -52, -24, 15, -46, 30, 51, 11, 52, -12, -35, -22, -46, 52, -50, -48, 9, 16, -40, -44, 13, -3, 42, 5, 0, 32, -9, -8, -26, -60, 28, 21, -28, -45, -24, -24, 37, -36, 9, 24, -48, 8, 10, 8, -49, 47, 46, 24, -16, 51, 4, 19, -29, 22, -8, 48, 19, -20, 0, 54, 17, -12, 10, 11, 40, 2, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 30,444 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0021191621199250221, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,30 } };
const TfArray<1, float> quant11_scale = { 1, { 0.092430934309959412, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,20 } };
const TfArray<1, float> quant12_scale = { 1, { 0.018459795042872429, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,10 } };
const TfArray<1, float> quant13_scale = { 1, { 0.024675901979207993, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,5 } };
const TfArray<1, float> quant14_scale = { 1, { 0.049278933554887772, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,2 } };
const TfArray<1, float> quant15_scale = { 1, { 0.10770449787378311, } };
const TfArray<1, int> quant15_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,2 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,10,9 } };
const TfArray<1, int> outputs0 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 11,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 12,6,5 } };
const TfArray<1, int> outputs2 = { 1, { 13 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 13,4,3 } };
const TfArray<1, int> outputs3 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata4 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs4 = { 3, { 14,2,1 } };
const TfArray<1, int> outputs4 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata5 = { 1 };
const TfArray<1, int> inputs5 = { 1, { 15 } };
const TfArray<1, int> outputs5 = { 1, { 16 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 444, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 13320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 448), (TfLiteIntArray*)&g0::tensor_dimension11, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension13, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension15, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[6] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[6] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 17, };
const size_t tflNodes_subgraph_index[] = {0, 6, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  16, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_35_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_35_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_35_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_35_invoke() {
  for (size_t i = 0; i < 6; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_35_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
